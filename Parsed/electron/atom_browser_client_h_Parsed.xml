<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/atom_browser_client.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_ATOM_BROWSER_CLIENT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_ATOM_BROWSER_CLIENT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/synchronization/lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/content_browser_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/render_process_host_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/buildflags/buildflags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/ssl/client_cert_identity.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ClientCertificateDelegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QuotaPermissionContext</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace content</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>net</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SSLCertRequestInfo</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NotificationPresenter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PlatformNotificationService</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserClient</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>ContentBrowserClient</name></expr></range></decl>,
                          <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>RenderProcessHostObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><specifier>static</specifier> <name>AtomBrowserClient</name><modifier>*</modifier></type> <name>Get</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>SetApplicationLocale</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>locale</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>AtomBrowserClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>AtomBrowserClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>using</name></type> <name>Delegate</name> <init>= <expr><name>content</name><operator>::</operator><name>ContentBrowserClient</name></expr></init></decl>;</decl_stmt>
  <function><type><name>void</name></type> <name>set_delegate</name><parameter_list>(<parameter><decl><type><name>Delegate</name><modifier>*</modifier></type> <name>delegate</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>delegate_</name> <operator>=</operator> <name>delegate</name></expr>;</expr_stmt> </block_content>}</block></function>

  <comment type="line">// Returns the WebContents for pending render processes.</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>GetWebContentsFromProcessID</name><argument_list>(<argument>int process_id</argument>)</argument_list></macro></expr>;</expr_stmt>

  <comment type="line">// Don't force renderer process to restart for once.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SuppressRendererProcessRestartForOnce</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>NotificationPresenter</name><modifier>*</modifier></type> <name>GetNotificationPresenter</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>void</name></type> <name>WebNotificationAllowed</name><argument_list>(<argument><expr><name>int</name> <name>render_process_id</name></expr></argument>,
                              <argument><expr><name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>bool</name>, <name>bool</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// content::NavigatorDelegate</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>NavigationThrottle</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
  <macro><name>CreateThrottlesForNavigation</name><argument_list>(<argument>content::NavigationHandle* handle</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// content::ContentBrowserClient:</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetApplicationLocale</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <macro><name>GetFontLookupTableCacheDir</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>ShouldEnableStrictSiteIsolation</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>BindHostReceiverForRenderer</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>RenderProcessHost</name><operator>*</operator> <name>render_process_host</name></expr></argument>,
      <argument><expr><name>mojo</name><operator>::</operator><name>GenericPendingReceiver</name> <name>receiver</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetUserAgent</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetUserAgent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>user_agent</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>SetCanUseCustomSiteInstance</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>should_disable</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>bool</name> <macro><name>CanUseCustomSiteInstance</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

 <label><name>protected</name>:</label>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderProcessWillLaunch</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderProcessHost</name><operator>*</operator> <name>host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>SpeechRecognitionManagerDelegate</name><operator>*</operator>
  <macro><name>CreateSpeechRecognitionManagerDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>TtsControllerDelegate</name><operator>*</operator> <macro><name>GetTtsControllerDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OverrideWebkitPrefs</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator> <name>render_view_host</name></expr></argument>,
                           <argument><expr><name>content</name><operator>::</operator><name>WebPreferences</name><operator>*</operator> <name>prefs</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SiteInstanceForNavigationType</name></type> <name>ShouldOverrideSiteInstanceForNavigation</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>current_rfh</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>speculative_rfh</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>url</name></expr></argument>,
      <argument><expr><name>bool</name> <name>has_navigation_started</name></expr></argument>,
      <argument><expr><name>bool</name> <name>has_request_started</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>SiteInstance</name><operator>*</operator><operator>*</operator> <name>affinity_site_instance</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RegisterPendingSiteInstance</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>SiteInstance</name><operator>*</operator> <name>pending_site_instance</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>AppendExtraCommandLineSwitches</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>CommandLine</name><operator>*</operator> <name>command_line</name></expr></argument>,
                                      <argument><expr><name>int</name> <name>child_process_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>AdjustUtilityServiceProcessCommandLine</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>service_manager</name><operator>::</operator><name>Identity</name><operator>&amp;</operator> <name>identity</name></expr></argument>,
      <argument><expr><name>base</name><operator>::</operator><name>CommandLine</name><operator>*</operator> <name>command_line</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidCreatePpapiPlugin</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>BrowserPpapiHost</name><operator>*</operator> <name>browser_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetGeolocationApiKey</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>QuotaPermissionContext</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateQuotaPermissionContext</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>GeneratedCodeCacheSettings</name> <macro><name>GetGeneratedCodeCacheSettings</name><argument_list>(
      <argument>content::BrowserContext* context</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>AllowCertificateError</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
      <argument><expr><name>int</name> <name>cert_error</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>SSLInfo</name><operator>&amp;</operator> <name>ssl_info</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>request_url</name></expr></argument>,
      <argument><expr><name>bool</name> <name>is_main_frame_request</name></expr></argument>,
      <argument><expr><name>bool</name> <name>strict_enforcement</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>content</name><operator>::</operator><name>CertificateRequestResultType</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
          <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>OnceClosure</name> <macro><name>SelectClientCertificate</name><argument_list>(
      <argument>content::WebContents* web_contents</argument>,
      <argument>net::SSLCertRequestInfo* cert_request_info</argument>,
      <argument>net::ClientCertIdentityList client_certs</argument>,
      <argument>std::unique_ptr&lt;content::ClientCertificateDelegate&gt; delegate</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>CanCreateWindow</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>opener</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>opener_url</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>opener_top_level_frame_url</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>url</name><operator>::</operator><name>Origin</name><operator>&amp;</operator> <name>source_origin</name></expr></argument>,
                       <argument><expr><name>content</name><operator>::</operator><name>mojom</name><operator>::</operator><name>WindowContainerType</name> <name>container_type</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>target_url</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>Referrer</name><operator>&amp;</operator> <name>referrer</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>frame_name</name></expr></argument>,
                       <argument><expr><name>WindowOpenDisposition</name> <name>disposition</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>WindowFeatures</name><operator>&amp;</operator> <name>features</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>additional_features</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>ResourceRequestBody</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>body</name></expr></argument>,
                       <argument><expr><name>bool</name> <name>user_gesture</name></expr></argument>,
                       <argument><expr><name>bool</name> <name>opener_suppressed</name></expr></argument>,
                       <argument><expr><name>bool</name><operator>*</operator> <name>no_javascript_access</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_PICTURE_IN_PICTURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>OverlayWindow</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateWindowForPictureInPicture</name><argument_list>(
      <argument>content::PictureInPictureWindowController* controller</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>void</name></type> <name>GetAdditionalAllowedSchemesForFileSystem</name><argument_list>(
      <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>additional_schemes</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>GetAdditionalWebUISchemes</name><argument_list>(
      <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>additional_schemes</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SiteInstanceDeleting</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>SiteInstance</name><operator>*</operator> <name>site_instance</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>ClientCertStore</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateClientCertStore</name><argument_list>(
      <argument>content::ResourceContext* resource_context</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>device</name><operator>::</operator><name>LocationProvider</name></expr></argument>&gt;</argument_list></name> <macro><name>OverrideSystemLocationProvider</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>Remote</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>NetworkContext</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateNetworkContext</name><argument_list>(
      <argument>content::BrowserContext* browser_context</argument>,
      <argument>bool in_memory</argument>,
      <argument>const base::FilePath&amp; relative_partition_path</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>NetworkContext</name><operator>*</operator> <macro><name>GetSystemNetworkContext</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>service_manager</name><operator>::</operator><name>Manifest</name></expr></argument>&gt;</argument_list></name> <macro><name>GetServiceManifestOverlay</name><argument_list>(
      <argument>base::StringPiece name</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>MediaObserver</name><operator>*</operator> <macro><name>GetMediaObserver</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>DevToolsManagerDelegate</name><operator>*</operator> <macro><name>GetDevToolsManagerDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>PlatformNotificationService</name><operator>*</operator> <macro><name>GetPlatformNotificationService</name><argument_list>(
      <argument>content::BrowserContext* browser_context</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>BrowserMainParts</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateBrowserMainParts</name><argument_list>(
      <argument>const content::MainFunctionParams&amp;</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <macro><name>GetDefaultDownloadDirectory</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>SharedURLLoaderFactory</name></expr></argument>&gt;</argument_list></name>
  <macro><name>GetSystemSharedURLLoaderFactory</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnNetworkServiceCreated</name><argument_list>(
      <argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>NetworkService</name><operator>*</operator> <name>network_service</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>FilePath</name></expr></argument>&gt;</argument_list></name> <macro><name>GetNetworkContextsParentDirectory</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetProduct</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RegisterNonNetworkNavigationURLLoaderFactories</name><argument_list>(
      <argument><expr><name>int</name> <name>frame_tree_node_id</name></expr></argument>,
      <argument><expr><name>NonNetworkURLLoaderFactoryMap</name><operator>*</operator> <name>factories</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RegisterNonNetworkSubresourceURLLoaderFactories</name><argument_list>(
      <argument><expr><name>int</name> <name>render_process_id</name></expr></argument>,
      <argument><expr><name>int</name> <name>render_frame_id</name></expr></argument>,
      <argument><expr><name>NonNetworkURLLoaderFactoryMap</name><operator>*</operator> <name>factories</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>WillCreateURLLoaderFactory</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>frame</name></expr></argument>,
      <argument><expr><name>int</name> <name>render_process_id</name></expr></argument>,
      <argument><expr><name>URLLoaderFactoryType</name> <name>type</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>url</name><operator>::</operator><name>Origin</name><operator>&amp;</operator> <name>request_initiator</name></expr></argument>,
      <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingReceiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>factory_receiver</name></expr></argument>,
      <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingRemote</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>TrustedURLLoaderHeaderClient</name></expr></argument>&gt;</argument_list></name><operator>*</operator>
          <name>header_client</name></expr></argument>,
      <argument><expr><name>bool</name><operator>*</operator> <name>bypass_redirect_checks</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>PendingRemote</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name></expr></argument>&gt;</argument_list></name>
  <macro><name>CreateURLLoaderFactoryForNetworkRequests</name><argument_list>(
      <argument>content::RenderProcessHost* process</argument>,
      <argument>network::mojom::NetworkContext* network_context</argument>,
      <argument>mojo::PendingRemote&lt;network::mojom::TrustedURLLoaderHeaderClient&gt;*
          header_client</argument>,
      <argument>const url::Origin&amp; request_initiator</argument>,
      <argument>const base::Optional&lt;net::NetworkIsolationKey&gt;&amp; network_isolation_key</argument>)</argument_list></macro>
      <name>override</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>bool</name></type> <name>PreSpawnRenderer</name><argument_list>(<argument><expr><name>sandbox</name><operator>::</operator><name>TargetPolicy</name><operator>*</operator> <name>policy</name></expr></argument>,
                        <argument><expr><name>RendererSpawnFlags</name> <name>flags</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>bool</name></type> <name>BindAssociatedReceiverFromFrame</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>interface_name</name></expr></argument>,
      <argument><expr><name>mojo</name><operator>::</operator><name>ScopedInterfaceEndpointHandle</name><operator>*</operator> <name>handle</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>HandleExternalProtocol</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>url</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>::</operator><name>Getter</name> <name>web_contents_getter</name></expr></argument>,
      <argument><expr><name>int</name> <name>child_id</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>NavigationUIData</name><operator>*</operator> <name>navigation_data</name></expr></argument>,
      <argument><expr><name>bool</name> <name>is_main_frame</name></expr></argument>,
      <argument><expr><name>ui</name><operator>::</operator><name>PageTransition</name> <name>page_transition</name></expr></argument>,
      <argument><expr><name>bool</name> <name>has_user_gesture</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>url</name><operator>::</operator><name>Origin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>initiating_origin</name></expr></argument>,
      <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingRemote</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>out_factory</name></expr></argument>)</argument_list>
      <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>LoginDelegate</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateLoginDelegate</name><argument_list>(
      <argument>const net::AuthChallengeInfo&amp; auth_info</argument>,
      <argument>content::WebContents* web_contents</argument>,
      <argument>const content::GlobalRequestID&amp; request_id</argument>,
      <argument>bool is_main_frame</argument>,
      <argument>const GURL&amp; url</argument>,
      <argument>scoped_refptr&lt;net::HttpResponseHeaders&gt; response_headers</argument>,
      <argument>bool first_auth_attempt</argument>,
      <argument>LoginAuthRequiredCallback auth_required_callback</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// content::RenderProcessHostObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderProcessHostDestroyed</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderProcessHost</name><operator>*</operator> <name>host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderProcessReady</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderProcessHost</name><operator>*</operator> <name>host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderProcessExited</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>RenderProcessHost</name><operator>*</operator> <name>host</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>ChildProcessTerminationInfo</name><operator>&amp;</operator> <name>info</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <struct>struct <name>ProcessPreferences</name> <block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>sandbox</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>native_window_open</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>disable_popups</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>web_security</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  }</block>;</struct>

  <decl_stmt><decl><type><name>bool</name></type> <name>ShouldForceNewSiteInstance</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>current_rfh</name></expr></argument>,
                                  <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>speculative_rfh</name></expr></argument>,
                                  <argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>dest_url</name></expr></argument>,
                                  <argument><expr><name>bool</name> <name>has_request_started</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>NavigationWasRedirectedCrossSite</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>SiteInstance</name><operator>*</operator> <name>current_instance</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>SiteInstance</name><operator>*</operator> <name>speculative_instance</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>dest_url</name></expr></argument>,
      <argument><expr><name>bool</name> <name>has_request_started</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>AddProcessPreferences</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>process_id</name></decl></parameter>, <parameter><decl><type><name>ProcessPreferences</name></type> <name>prefs</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>RemoveProcessPreferences</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>process_id</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsProcessObserved</name><argument_list>(<argument><expr><name>int</name> <name>process_id</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsRendererSandboxed</name><argument_list>(<argument><expr><name>int</name> <name>process_id</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>RendererUsesNativeWindowOpen</name><argument_list>(<argument><expr><name>int</name> <name>process_id</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>RendererDisablesPopups</name><argument_list>(<argument><expr><name>int</name> <name>process_id</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetAffinityPreference</name><argument_list>(<argument>content::RenderFrameHost* rfh</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>SiteInstance</name><operator>*</operator> <macro><name>GetSiteInstanceFromAffinity</name><argument_list>(
      <argument>content::BrowserContext* browser_context</argument>,
      <argument>const GURL&amp; url</argument>,
      <argument>content::RenderFrameHost* rfh</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ConsiderSiteInstanceForAffinity</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>rfh</name></expr></argument>,
                                       <argument><expr><name>content</name><operator>::</operator><name>SiteInstance</name><operator>*</operator> <name>site_instance</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>IsRendererSubFrame</name><argument_list>(<argument><expr><name>int</name> <name>process_id</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

  <comment type="line">// pending_render_process =&gt; web contents.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>pending_processes_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>ProcessId</name></expr></argument>&gt;</argument_list></name> <name>render_process_host_pids_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>renderer_is_subframe_</name></expr>;</expr_stmt>

  <comment type="line">// list of site per affinity. weak_ptr to prevent instance locking</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>content</name><operator>::</operator><name>SiteInstance</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>site_per_affinities_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PlatformNotificationService</name></expr></argument>&gt;</argument_list></name> <name>notification_service_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NotificationPresenter</name></expr></argument>&gt;</argument_list></name> <name>notification_presenter_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>Delegate</name><modifier>*</modifier></type> <name>delegate_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ProcessPreferences</name></expr></argument>&gt;</argument_list></name> <name>process_preferences_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>user_agent_override_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>disable_process_restart_tricks_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomBrowserClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_ATOM_BROWSER_CLIENT_H_</comment>
</unit>
