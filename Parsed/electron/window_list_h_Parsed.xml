<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/window_list.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_WINDOW_LIST_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_WINDOW_LIST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/lazy_instance.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NativeWindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WindowListObserver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>WindowList</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindow</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>WindowVector</name></expr>;</expr_stmt></typedef>

  <function_decl><type><specifier>static</specifier> <name>WindowVector</name></type> <name>GetWindows</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsEmpty</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Adds or removes |window| from the list it is associated with.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AddWindow</name><parameter_list>(<parameter><decl><type><name>NativeWindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RemoveWindow</name><parameter_list>(<parameter><decl><type><name>NativeWindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Called by window when a close is cancelled by beforeunload handler.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WindowCloseCancelled</name><parameter_list>(<parameter><decl><type><name>NativeWindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Adds and removes |observer| from the observer list.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AddObserver</name><parameter_list>(<parameter><decl><type><name>WindowListObserver</name><modifier>*</modifier></type> <name>observer</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RemoveObserver</name><parameter_list>(<parameter><decl><type><name>WindowListObserver</name><modifier>*</modifier></type> <name>observer</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Closes all windows.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseAllWindows</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Destroy all windows.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DestroyAllWindows</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <function_decl><type><specifier>static</specifier> <name>WindowList</name><modifier>*</modifier></type> <name>GetInstance</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><call><name>WindowList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>WindowList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// A vector of the windows in this list, in the order they were added.</comment>
  <decl_stmt><decl><type><name>WindowVector</name></type> <name>windows_</name></decl>;</decl_stmt>

  <comment type="line">// A list of observers which will be notified of every window addition and</comment>
  <comment type="line">// removal across all WindowLists.</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>base</name><operator>::</operator><name><name>LazyInstance</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name><name>ObserverList</name><argument_list type="generic">&lt;<argument><expr><name>WindowListObserver</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Leaky</name>
      <name>observers_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>WindowList</name><modifier>*</modifier></type> <name>instance_</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>WindowList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_WINDOW_LIST_H_</comment>
</unit>
