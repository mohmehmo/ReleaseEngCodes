<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/web_contents_preferences.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_WEB_CONTENTS_PREFERENCES_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_WEB_CONTENTS_PREFERENCES_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_user_data.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CommandLine</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<struct_decl>struct <name>WebPreferences</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Dictionary</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Stores and applies the preferences of WebContents.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>WebContentsPreferences</name>
    <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name><name>WebContentsUserData</name><argument_list type="generic">&lt;<argument><expr><name>WebContentsPreferences</name></expr></argument>&gt;</argument_list></name> <block>{
 <expr><name>public</name><operator>:</operator>
  <comment type="line">// Get self from WebContents.</comment>
  <specifier>static</specifier> <name>WebContentsPreferences</name><operator>*</operator> <call><name>From</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>)</argument_list></call></expr>;

  <expr><call><name>WebContentsPreferences</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>web_preferences</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>WebContentsPreferences</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// Set WebPreferences defaults onto the JS object.</comment>
  <expr><name>void</name> <call><name>SetDefaults</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// A simple way to know whether a Boolean property is enabled.</comment>
  <expr><name>bool</name> <macro><name>IsEnabled</name><argument_list>(<argument>base::StringPiece name</argument>, <argument>bool default_value = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

  <comment type="line">// $.extend(|web_preferences|, |new_web_preferences|).</comment>
  <expr><name>void</name> <call><name>Merge</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>DictionaryValue</name><operator>&amp;</operator> <name>new_web_preferences</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Append command paramters according to preferences.</comment>
  <expr><name>void</name> <macro><name>AppendCommandLineSwitches</name><argument_list>(<argument>base::CommandLine* command_line</argument>,
                                 <argument>bool is_subframe</argument>)</argument_list></macro></expr>;

  <comment type="line">// Modify the WebPreferences according to preferences.</comment>
  <expr><name>void</name> <call><name>OverrideWebkitPrefs</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebPreferences</name><operator>*</operator> <name>prefs</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Clear the current WebPreferences.</comment>
  <expr><name>void</name> <call><name>Clear</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Return true if the particular preference value exists.</comment>
  <expr><name>bool</name> <macro><name>GetPreference</name><argument_list>(<argument>base::StringPiece name</argument>, <argument>std::string* value</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

  <comment type="line">// Returns the preload script path.</comment>
  <expr><name>bool</name> <macro><name>GetPreloadPath</name><argument_list>(<argument>base::FilePath::StringType* path</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

  <comment type="line">// Returns the web preferences.</comment>
  <expr><name>base</name><operator>::</operator><name>Value</name><operator>*</operator> <macro><name>preference</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>&amp;</operator><name>preference_</name></expr>;</return> }</block>
  <name>base</name><operator>::</operator><name>Value</name><operator>*</operator> <macro><name>last_preference</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>&amp;</operator><name>last_preference_</name></expr>;</return> }</block>

 <name>private</name><operator>:</operator>
  <name>friend</name> <name>class</name> <name>content</name><operator>::</operator><name><name>WebContentsUserData</name><argument_list type="generic">&lt;<argument><expr><name>WebContentsPreferences</name></expr></argument>&gt;</argument_list></name></expr>;
  <expr><name>friend</name> <name>class</name> <name>AtomBrowserClient</name></expr>;

  <comment type="line">// Get WebContents according to process ID.</comment>
  <expr><specifier>static</specifier> <name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>GetWebContentsFromProcessID</name><argument_list>(<argument>int process_id</argument>)</argument_list></macro></expr>;

  <comment type="line">// Set preference value to given bool if user did not provide value</comment>
  <expr><name>bool</name> <macro><name>SetDefaultBoolIfUndefined</name><argument_list>(<argument>base::StringPiece key</argument>, <argument>bool val</argument>)</argument_list></macro></expr>;

  <comment type="line">// Set preference value to given bool</comment>
  <expr><name>void</name> <macro><name>SetBool</name><argument_list>(<argument>base::StringPiece key</argument>, <argument>bool value</argument>)</argument_list></macro></expr>;

  <expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WebContentsPreferences</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>instances_</name></expr>;

  <expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents_</name></expr>;

  <expr><name>base</name><operator>::</operator><name>Value</name> <name>preference_</name> <operator>=</operator> <name>base</name><operator>::</operator><call><name>Value</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>Value</name><operator>::</operator><name>Type</name><operator>::</operator><name>DICTIONARY</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>base</name><operator>::</operator><name>Value</name> <name>last_preference_</name> <operator>=</operator> <name>base</name><operator>::</operator><call><name>Value</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>Value</name><operator>::</operator><name>Type</name><operator>::</operator><name>DICTIONARY</name></expr></argument>)</argument_list></call></expr>;

  <expr><call><name>WEB_CONTENTS_USER_DATA_KEY_DECL</name><argument_list>()</argument_list></call></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>WebContentsPreferences</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_WEB_CONTENTS_PREFERENCES_H_</comment>
</unit>
