<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/node_bindings.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_NODE_BINDINGS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_NODE_BINDINGS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/single_thread_task_runner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"uv.h"</cpp:file></cpp:include>  <comment type="line">// NOLINT(build/include)</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v8/include/v8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MessageLoop</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>node</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Environment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MultiIsolatePlatform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IsolateData</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace node</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NodeBindings</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>BrowserEnvironment</name> <block>{<block_content>
    <expr_stmt><expr><name>BROWSER</name></expr><operator>,</operator>
    <expr><name>RENDERER</name></expr><operator>,</operator>
    <expr><name>WORKER</name></expr><operator>,</operator></expr_stmt>
  </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

  <function_decl><type><specifier>static</specifier> <name>NodeBindings</name><modifier>*</modifier></type> <name>Create</name><parameter_list>(<parameter><decl><type><name>BrowserEnvironment</name></type> <name>browser_env</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RegisterBuiltinModules</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsInitialized</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>NodeBindings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Setup V8, libuv.</comment>
  <function_decl><type><name>void</name></type> <name>Initialize</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Create the environment and load node.js.</comment>
  <expr_stmt><expr><name>node</name><operator>::</operator><name>Environment</name><operator>*</operator> <macro><name>CreateEnvironment</name><argument_list>(<argument>v8::Handle&lt;v8::Context&gt; context</argument>,
                                       <argument>node::MultiIsolatePlatform* platform</argument>,
                                       <argument>bool bootstrap_env</argument>)</argument_list></macro></expr>;</expr_stmt>

  <comment type="line">// Load node.js in the environment.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>LoadEnvironment</name><argument_list>(<argument><expr><name>node</name><operator>::</operator><name>Environment</name><operator>*</operator> <name>env</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Prepare for message loop integration.</comment>
  <function_decl><type><name>void</name></type> <name>PrepareMessageLoop</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Do message loop integration.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>RunMessageLoop</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><name>node</name><operator>::</operator><name>IsolateData</name><operator>*</operator> <macro><name>isolate_data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>isolate_data_</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Gets/sets the environment to wrap uv loop.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>set_uv_env</name><argument_list>(<argument><expr><name>node</name><operator>::</operator><name>Environment</name><operator>*</operator> <name>env</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>uv_env_</name> <operator>=</operator> <name>env</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
  <expr_stmt><expr><name>node</name><operator>::</operator><name>Environment</name><operator>*</operator> <macro><name>uv_env</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>uv_env_</name></expr>;</return> }</block></expr></expr_stmt>

  <expr_stmt><expr><name>uv_loop_t</name><operator>*</operator> <macro><name>uv_loop</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>uv_loop_</name></expr>;</return> }</block></expr></expr_stmt>

 <label><name>protected</name>:</label>
  <function_decl><type><name>explicit</name></type> <name>NodeBindings</name><parameter_list>(<parameter><decl><type><name>BrowserEnvironment</name></type> <name>browser_env</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Called to poll events in new thread.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>PollEvents</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Run the libuv loop for once.</comment>
  <function_decl><type><name>void</name></type> <name>UvRunOnce</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Make the main thread run libuv loop.</comment>
  <function_decl><type><name>void</name></type> <name>WakeupMainThread</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Interrupt the PollEvents.</comment>
  <function_decl><type><name>void</name></type> <name>WakeupEmbedThread</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Which environment we are running.</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>BrowserEnvironment</name></type> <name>browser_env_</name></decl>;</decl_stmt>

  <comment type="line">// Current thread's MessageLoop.</comment>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>SingleThreadTaskRunner</name></expr></argument>&gt;</argument_list></name></type> <name>task_runner_</name></decl>;</decl_stmt>

  <comment type="line">// Current thread's libuv loop.</comment>
  <decl_stmt><decl><type><name>uv_loop_t</name><modifier>*</modifier></type> <name>uv_loop_</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <comment type="line">// Thread to poll uv events.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EmbedThreadRunner</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Whether the libuv loop has ended.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>embed_closed_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Loop used when constructed in WORKER mode</comment>
  <decl_stmt><decl><type><name>uv_loop_t</name></type> <name>worker_loop_</name></decl>;</decl_stmt>

  <comment type="line">// Dummy handle to make uv's loop not quit.</comment>
  <decl_stmt><decl><type><name>uv_async_t</name></type> <name>dummy_uv_handle_</name></decl>;</decl_stmt>

  <comment type="line">// Thread for polling events.</comment>
  <decl_stmt><decl><type><name>uv_thread_t</name></type> <name>embed_thread_</name></decl>;</decl_stmt>

  <comment type="line">// Semaphore to wait for main loop in the embed thread.</comment>
  <decl_stmt><decl><type><name>uv_sem_t</name></type> <name>embed_sem_</name></decl>;</decl_stmt>

  <comment type="line">// Environment that to wrap the uv loop.</comment>
  <expr_stmt><expr><name>node</name><operator>::</operator><name>Environment</name><operator>*</operator> <name>uv_env_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

  <comment type="line">// Isolate data used in creating the environment</comment>
  <expr_stmt><expr><name>node</name><operator>::</operator><name>IsolateData</name><operator>*</operator> <name>isolate_data_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>NodeBindings</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NodeBindings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_NODE_BINDINGS_H_</comment>
</unit>
