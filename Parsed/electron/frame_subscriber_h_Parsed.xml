<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/frame_subscriber.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_FRAME_SUBSCRIBER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_FRAME_SUBSCRIBER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/viz/host/client_frame_sink_video_capturer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/pending_remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v8/include/v8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gfx</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Image</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>WebContents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FrameSubscriber</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>WebContentsObserver</name></expr></range></decl>,
                        <decl><type ref="prev"/><name>public</name> <name>viz</name>::<name>mojom</name>::<name>FrameSinkVideoConsumer</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>using</name></type> <name>FrameCaptureCallback</name> <init>=
      <expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Image</name><operator>&amp;</operator>, <specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

  <macro><name>FrameSubscriber</name><argument_list>(<argument>content::WebContents* web_contents</argument>,
                  <argument>const FrameCaptureCallback&amp; callback</argument>,
                  <argument>bool only_dirty</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>FrameSubscriber</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>void</name></type> <name>AttachToHost</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderWidgetHost</name><operator>*</operator> <name>host</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>DetachFromHost</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>void</name></type> <name>RenderViewCreated</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator> <name>host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderViewDeleted</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator> <name>host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderViewHostChanged</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator> <name>old_host</name></expr></argument>,
                             <argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator> <name>new_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// viz::mojom::FrameSinkVideoConsumer implementation.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnFrameCaptured</name><argument_list>(
      <argument><expr><name>base</name><operator>::</operator><name>ReadOnlySharedMemoryRegion</name> <name>data</name></expr></argument>,
      <argument><expr><operator>::</operator><name>media</name><operator>::</operator><name>mojom</name><operator>::</operator><name>VideoFrameInfoPtr</name> <name>info</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>content_rect</name></expr></argument>,
      <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingRemote</name><argument_list type="generic">&lt;<argument><expr><name>viz</name><operator>::</operator><name>mojom</name><operator>::</operator><name>FrameSinkVideoConsumerFrameCallbacks</name></expr></argument>&gt;</argument_list></name>
          <name>callbacks</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnStopped</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>Done</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>damage</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SkBitmap</name><operator>&amp;</operator> <name>frame</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Get the pixel size of render view.</comment>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetRenderViewSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FrameCaptureCallback</name></type> <name>callback_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>only_dirty_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>content</name><operator>::</operator><name>RenderWidgetHost</name><operator>*</operator> <name>host_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>viz</name><operator>::</operator><name>ClientFrameSinkVideoCapturer</name></expr></argument>&gt;</argument_list></name> <name>video_capturer_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>FrameSubscriber</name></expr></argument>&gt;</argument_list></name> <name>weak_ptr_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>FrameSubscriber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_FRAME_SUBSCRIBER_H_</comment>
</unit>
