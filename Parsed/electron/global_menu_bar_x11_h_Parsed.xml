<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/views/global_menu_bar_x11.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_VIEWS_GLOBAL_MENU_BAR_X11_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_VIEWS_GLOBAL_MENU_BAR_X11_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/compiler_specific.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/atom_menu_model.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/base/glib/glib_signal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/native_widget_types.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>_DbusmenuMenuitem</name></name></type> <name>DbusmenuMenuitem</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_DbusmenuServer</name></name></type> <name>DbusmenuServer</name>;</typedef>

<decl_stmt><decl><type><name>namespace</name></type> <name>ui</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Accelerator</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NativeWindowViews</name></decl>;</decl_stmt>

<comment type="line">// Controls the Mac style menu bar on Unity.</comment>
<comment type="line">//</comment>
<comment type="line">// Unity has an Apple-like menu bar at the top of the screen that changes</comment>
<comment type="line">// depending on the active window. In the GTK port, we had a hidden GtkMenuBar</comment>
<comment type="line">// object in each GtkWindow which existed only to be scrapped by the</comment>
<comment type="line">// libdbusmenu-gtk code. Since we don't have GtkWindows anymore, we need to</comment>
<comment type="line">// interface directly with the lower level libdbusmenu-glib, which we</comment>
<comment type="line">// opportunistically dlopen() since not everyone is running Ubuntu.</comment>
<comment type="line">//</comment>
<comment type="line">// This class is like the chrome's corresponding one, but it generates the menu</comment>
<comment type="line">// from menu models instead, and it is also per-window specific.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>GlobalMenuBarX11</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><name>explicit</name></type> <name>GlobalMenuBarX11</name><parameter_list>(<parameter><decl><type><name>NativeWindowViews</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>GlobalMenuBarX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Creates the object path for DbusmenuServer which is attached to |xid|.</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>GetPathForWindow</name><argument_list>(<argument>gfx::AcceleratedWidget xid</argument>)</argument_list></macro></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>SetMenu</name><parameter_list>(<parameter><decl><type><name>AtomMenuModel</name><modifier>*</modifier></type> <name>menu_model</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>bool</name> <macro><name>IsServerStarted</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Called by NativeWindow when it show/hides.</comment>
  <function_decl><type><name>void</name></type> <name>OnWindowMapped</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>OnWindowUnmapped</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <comment type="line">// Creates a DbusmenuServer.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>InitServer</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>AcceleratedWidget</name> <name>xid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Create a menu from menu model.</comment>
  <function_decl><type><name>void</name></type> <name>BuildMenuFromModel</name><parameter_list>(<parameter><decl><type><name>AtomMenuModel</name><modifier>*</modifier></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>DbusmenuMenuitem</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Sets the accelerator for |item|.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>RegisterAccelerator</name><argument_list>(<argument><expr><name>DbusmenuMenuitem</name><operator>*</operator> <name>item</name></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>Accelerator</name><operator>&amp;</operator> <name>accelerator</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <macro><name>CHROMEG_CALLBACK_1</name><argument_list>(<argument>GlobalMenuBarX11</argument>,
                     <argument>void</argument>,
                     <argument>OnItemActivated</argument>,
                     <argument>DbusmenuMenuitem*</argument>,
                     <argument>unsigned int</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name>CHROMEG_CALLBACK_0</name><argument_list>(<argument><expr><name>GlobalMenuBarX11</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>OnSubMenuShow</name></expr></argument>, <argument><expr><name>DbusmenuMenuitem</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>NativeWindowViews</name><modifier>*</modifier></type> <name>window_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>AcceleratedWidget</name> <name>xid_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>DbusmenuServer</name><modifier>*</modifier></type> <name>server_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>GlobalMenuBarX11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_VIEWS_GLOBAL_MENU_BAR_X11_H_</comment>
</unit>
