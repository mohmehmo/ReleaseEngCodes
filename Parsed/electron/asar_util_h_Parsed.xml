<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/asar/asar_util.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_ASAR_ASAR_UTIL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_ASAR_ASAR_UTIL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FilePath</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>asar</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Archive</name></decl>;</decl_stmt>

<comment type="line">// Gets or creates a new Archive from the path.</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Archive</name></expr></argument>&gt;</argument_list></name> <call><name>GetOrCreateAsarArchive</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Destroy cached Archive objects.</comment>
<function_decl><type><name>void</name></type> <name>ClearArchives</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="line">// Separates the path to Archive out.</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>GetAsarArchivePath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>full_path</name></expr></argument>,
                        <argument><expr><name>base</name><operator>::</operator><name>FilePath</name><operator>*</operator> <name>asar_path</name></expr></argument>,
                        <argument><expr><name>base</name><operator>::</operator><name>FilePath</name><operator>*</operator> <name>relative_path</name></expr></argument>,
                        <argument><expr><name>bool</name> <name>allow_root</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Same with base::ReadFileToString but supports asar Archive.</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>ReadFileToString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>contents</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace asar</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_ASAR_ASAR_UTIL_H_</comment>
</unit>
