<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/crash_reporter/crash_reporter.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_CRASH_REPORTER_CRASH_REPORTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_CRASH_REPORTER_CRASH_REPORTER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Dictionary</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>crash_reporter</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kCrashpadProcess</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kCrashesDirectoryKey</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CrashReporter</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>StringMap</name></expr>;</expr_stmt></typedef>
  <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>UploadReportResult</name></expr>;</expr_stmt></typedef>  <comment type="line">// upload-date, id</comment>

  <function_decl><type><specifier>static</specifier> <name>CrashReporter</name><modifier>*</modifier></type> <name>GetInstance</name><parameter_list>()</parameter_list>;</function_decl>
  <comment type="line">// FIXME(zcbenz): We should not do V8 in this file, this method should only</comment>
  <comment type="line">// accept C++ struct as parameter, and atom_api_crash_reporter.cc is</comment>
  <comment type="line">// responsible for parsing the parameter from JavaScript.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>StartInstance</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>bool</name></type> <name>IsInitialized</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>Start</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>product_name</name></expr></argument>,
             <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>company_name</name></expr></argument>,
             <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>submit_url</name></expr></argument>,
             <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>crashes_dir</name></expr></argument>,
             <argument><expr><name>bool</name> <name>upload_to_server</name></expr></argument>,
             <argument><expr><name>bool</name> <name>skip_system_crash_handler</name></expr></argument>,
             <argument><expr><specifier>const</specifier> <name>StringMap</name><operator>&amp;</operator> <name>extra_parameters</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CrashReporter</name><operator>::</operator><name>UploadReportResult</name></expr></argument>&gt;</argument_list></name> <call><name>GetUploadedReports</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>crashes_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetUploadToServer</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>upload_to_server</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>GetUploadToServer</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>AddExtraParameter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>,
                                 <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>RemoveExtraParameter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>GetParameters</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

 <label><name>protected</name>:</label>
  <expr_stmt><expr><call><name>CrashReporter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>CrashReporter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>Init</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>product_name</name></expr></argument>,
                    <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>company_name</name></expr></argument>,
                    <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>submit_url</name></expr></argument>,
                    <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>crashes_dir</name></expr></argument>,
                    <argument><expr><name>bool</name> <name>upload_to_server</name></expr></argument>,
                    <argument><expr><name>bool</name> <name>skip_system_crash_handler</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetUploadParameters</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>StringMap</name></type> <name>upload_parameters_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>process_type_</name></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>bool</name></type> <name>is_initialized_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>SetUploadParameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringMap</name><modifier>&amp;</modifier></type> <name>parameters</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>CrashReporter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace crash_reporter</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_CRASH_REPORTER_CRASH_REPORTER_H_</comment>
</unit>
