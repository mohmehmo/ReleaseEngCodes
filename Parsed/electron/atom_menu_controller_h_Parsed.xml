<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/cocoa/atom_menu_controller.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_COCOA_ATOM_MENU_CONTROLLER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_COCOA_ATOM_MENU_CONTROLLER_H_</name></cpp:macro></cpp:define>

<cpp:empty>#import &lt;Cocoa/Cocoa.h&gt;</cpp:empty>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/mac/scoped_nsobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string16.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>AtomMenuModel</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// A controller for the cross-platform menu model. The menu that's created</comment>
<comment type="line">// has the tag and represented object set for each menu item. The object is a</comment>
<comment type="line">// NSValue holding a pointer to the model for that level of the menu (to</comment>
<comment type="line">// allow for hierarchical menus). The tag is the index into that model for</comment>
<comment type="line">// that particular item. It is important that the model outlives this object</comment>
<comment type="line">// as it only maintains weak references.</comment>
@<decl_stmt><decl><type><name>interface</name></type> <name>AtomMenuController</name> <range>: <expr><name><name>NSObject</name> <argument_list type="generic">&lt;<argument><expr><name>NSMenuDelegate</name></expr></argument>&gt;</argument_list></name> <block>{
 @<expr><name>protected</name>
  <name>electron</name><operator>::</operator><name>AtomMenuModel</name><operator>*</operator> <name>model_</name></expr>;  <comment type="line">// weak</comment>
  <expr><name>base</name><operator>::</operator><name><name>scoped_nsobject</name><argument_list type="generic">&lt;<argument><expr><name>NSMenu</name></expr></argument>&gt;</argument_list></name> <name>menu_</name></expr>;
  <expr><name>BOOL</name> <name>isMenuOpen_</name></expr>;
  <expr><name>BOOL</name> <name>useDefaultAccelerator_</name></expr>;
  <expr><name>base</name><operator>::</operator><name>OnceClosure</name> <name>closeCallback</name></expr>;
}</block>

@<macro><name>property</name><argument_list>(<argument>nonatomic</argument>, <argument>assign</argument>)</argument_list></macro> <name>electron</name><operator>::</operator><name>AtomMenuModel</name><operator>*</operator> <name>model</name></expr></range></decl>;</decl_stmt>

<comment type="line">// Builds a NSMenu from the pre-built model (must not be nil). Changes made</comment>
<comment type="line">// to the contents of the model after calling this will not be noticed.</comment>
<expr_stmt><expr><operator>-</operator> <operator>(</operator><name>id</name><operator>)</operator><name>initWithModel</name><operator>:</operator><operator>(</operator><name>electron</name><operator>::</operator><name>AtomMenuModel</name><operator>*</operator><operator>)</operator><name>model</name>
    <name>useDefaultAccelerator</name><operator>:</operator><operator>(</operator><name>BOOL</name><operator>)</operator><name>use</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>-</operator> <operator>(</operator><name>void</name><operator>)</operator><name>setCloseCallback</name><operator>:</operator><operator>(</operator><name>base</name><operator>::</operator><name>OnceClosure</name><operator>)</operator><name>callback</name></expr>;</expr_stmt>

<comment type="line">// Populate current NSMenu with |model|.</comment>
<expr_stmt><expr><operator>-</operator> <operator>(</operator><name>void</name><operator>)</operator><name>populateWithModel</name><operator>:</operator><operator>(</operator><name>electron</name><operator>::</operator><name>AtomMenuModel</name><operator>*</operator><operator>)</operator><name>model</name></expr>;</expr_stmt>

<comment type="line">// Programmatically close the constructed menu.</comment>
<expr_stmt><expr><operator>-</operator> <operator>(</operator><name>void</name><operator>)</operator><name>cancel</name></expr>;</expr_stmt>

<comment type="line">// Access to the constructed menu if the complex initializer was used. If the</comment>
<comment type="line">// default initializer was used, then this will create the menu on first call.</comment>
<expr_stmt><expr><operator>-</operator> <operator>(</operator><name>NSMenu</name><operator>*</operator><operator>)</operator><name>menu</name></expr>;</expr_stmt>

<comment type="line">// Whether the menu is currently open.</comment>
<expr_stmt><expr><operator>-</operator> <operator>(</operator><name>BOOL</name><operator>)</operator><name>isMenuOpen</name></expr>;</expr_stmt>

<comment type="line">// NSMenuDelegate methods this class implements. Subclasses should call super</comment>
<comment type="line">// if extending the behavior.</comment>
<expr_stmt><expr><operator>-</operator> <operator>(</operator><name>void</name><operator>)</operator><name>menuWillOpen</name><operator>:</operator><operator>(</operator><name>NSMenu</name><operator>*</operator><operator>)</operator><name>menu</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>-</operator> <operator>(</operator><name>void</name><operator>)</operator><name>menuDidClose</name><operator>:</operator><operator>(</operator><name>NSMenu</name><operator>*</operator><operator>)</operator><name>menu</name></expr>;</expr_stmt>

@<expr><name>end</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_COCOA_ATOM_MENU_CONTROLLER_H_</comment>
</unit>
