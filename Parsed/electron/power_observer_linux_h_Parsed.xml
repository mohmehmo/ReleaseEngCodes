<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/lib/power_observer_linux.h"><comment type="line">// Copyright (c) 2017 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_LIB_POWER_OBSERVER_LINUX_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_LIB_POWER_OBSERVER_LINUX_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/power_monitor/power_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus/bus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus/object_proxy.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>PowerObserverLinux</name> <range>: <expr><name>public</name> <name>base</name><operator>::</operator><name>PowerObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>PowerObserverLinux</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>PowerObserverLinux</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>protected</name><operator>:</operator>
  <name>void</name> <call><name>BlockSleep</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>UnblockSleep</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>BlockShutdown</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>UnblockShutdown</name><argument_list>()</argument_list></call></expr>;

  <expr><name>void</name> <call><name>SetShutdownHandler</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>should_shutdown</name></expr></argument>)</argument_list></call></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>void</name> <macro><name>OnLoginServiceAvailable</name><argument_list>(<argument>bool available</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>OnInhibitResponse</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>ScopedFD</name><operator>*</operator> <name>scoped_fd</name></expr></argument>, <argument><expr><name>dbus</name><operator>::</operator><name>Response</name><operator>*</operator> <name>response</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>OnPrepareForSleep</name><argument_list>(<argument><expr><name>dbus</name><operator>::</operator><name>Signal</name><operator>*</operator> <name>signal</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>OnPrepareForShutdown</name><argument_list>(<argument><expr><name>dbus</name><operator>::</operator><name>Signal</name><operator>*</operator> <name>signal</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>OnSignalConnected</name><argument_list>(<argument>const std::string&amp; interface</argument>,
                         <argument>const std::string&amp; signal</argument>,
                         <argument>bool success</argument>)</argument_list></macro></expr>;

  <expr><name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>should_shutdown_</name></expr>;

  <expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>dbus</name><operator>::</operator><name>ObjectProxy</name></expr></argument>&gt;</argument_list></name> <name>logind_</name></expr>;
  <expr><name>std</name><operator>::</operator><name>string</name> <name>lock_owner_name_</name></expr>;
  <expr><name>base</name><operator>::</operator><name>ScopedFD</name> <name>sleep_lock_</name></expr>;
  <expr><name>base</name><operator>::</operator><name>ScopedFD</name> <name>shutdown_lock_</name></expr>;
  <expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>PowerObserverLinux</name></expr></argument>&gt;</argument_list></name> <name>weak_ptr_factory_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>PowerObserverLinux</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_LIB_POWER_OBSERVER_LINUX_H_</comment>
</unit>
