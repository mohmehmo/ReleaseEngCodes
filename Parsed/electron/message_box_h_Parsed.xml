<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/message_box.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_MESSAGE_BOX_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_MESSAGE_BOX_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback_forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/image/image_skia.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NativeWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>MessageBoxType</name> <block>{<block_content>
  <expr_stmt><expr><name>kNone</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>
  <expr><name>kInformation</name></expr><operator>,</operator>
  <expr><name>kWarning</name></expr><operator>,</operator>
  <expr><name>kError</name></expr><operator>,</operator>
  <expr><name>kQuestion</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>DialogResult</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<struct>struct <name>MessageBoxSettings</name> <block>{
  <expr_stmt><expr><name>electron</name><operator>::</operator><name>NativeWindow</name><operator>*</operator> <name>parent_window</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>MessageBoxType</name></type> <name>type</name> <init>= <expr><name>electron</name><operator>::</operator><name>MessageBoxType</name><operator>::</operator><name>kNone</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>buttons</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>default_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cancel_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>no_link</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>title</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>message</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>detail</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>checkbox_label</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>checkbox_checked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>ImageSkia</name> <name>icon</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>MessageBoxSettings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MessageBoxSettings</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MessageBoxSettings</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>MessageBoxSettings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<function_decl><type><name>int</name></type> <name>ShowMessageBoxSync</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MessageBoxSettings</name><modifier>&amp;</modifier></type> <name>settings</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <expr_stmt><expr><name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>int</name> <name>code</name>, <name>bool</name> <name>checkbox_checked</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
    <name>MessageBoxCallback</name></expr>;</expr_stmt></typedef>

<function_decl><type><name>void</name></type> <name>ShowMessageBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MessageBoxSettings</name><modifier>&amp;</modifier></type> <name>settings</name></decl></parameter>,
                    <parameter><decl><type><name>MessageBoxCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Like ShowMessageBox with simplest settings, but safe to call at very early</comment>
<comment type="line">// stage of application.</comment>
<decl_stmt><decl><type><name>void</name></type> <name>ShowErrorBox</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>title</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>content</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_MESSAGE_BOX_H_</comment>
</unit>
