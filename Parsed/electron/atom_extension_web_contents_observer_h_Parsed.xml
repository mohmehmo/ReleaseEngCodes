<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/extensions/atom_extension_web_contents_observer.h"><comment type="line">// Copyright 2014 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_WEB_CONTENTS_OBSERVER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_WEB_CONTENTS_OBSERVER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_user_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensions/browser/extension_web_contents_observer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>extensions</name> <block>{<block_content>

<comment type="line">// The app_shell version of ExtensionWebContentsObserver.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionWebContentsObserver</name>
    <range>: <expr><name>public</name> <name>ExtensionWebContentsObserver</name></expr></range></decl>,
      <decl><type ref="prev"/><name>public</name> <name>content</name>::<name><name>WebContentsUserData</name><argument_list type="generic">&lt;<argument><expr><name>AtomExtensionWebContentsObserver</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><operator>~</operator><macro><name>AtomExtensionWebContentsObserver</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// Creates and initializes an instance of this class for the given</comment>
  <comment type="line">// |web_contents|, if it doesn't already exist.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>CreateForWebContents</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>friend</name> <name>class</name> <name>content</name><operator>::</operator><name><name>WebContentsUserData</name><argument_list type="generic">&lt;<argument><expr><name>AtomExtensionWebContentsObserver</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>explicit</name></type> <name>AtomExtensionWebContentsObserver</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>WEB_CONTENTS_USER_DATA_KEY_DECL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomExtensionWebContentsObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace extensions</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_WEB_CONTENTS_OBSERVER_H_</comment>
</unit>
