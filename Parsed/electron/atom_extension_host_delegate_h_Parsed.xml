<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/extensions/atom_extension_host_delegate.h"><comment type="line">// Copyright 2014 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_HOST_DELEGATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_HOST_DELEGATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensions/browser/extension_host_delegate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>extensions</name> <block>{<block_content>

<comment type="line">// A minimal ExtensionHostDelegate.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionHostDelegate</name> <range>: <expr><name>public</name> <name>ExtensionHostDelegate</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>AtomExtensionHostDelegate</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomExtensionHostDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// ExtensionHostDelegate implementation.</comment>
  <expr><name>void</name> <macro><name>OnExtensionHostCreated</name><argument_list>(<argument>content::WebContents* web_contents</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnRenderViewCreatedForBackgroundPage</name><argument_list>(<argument>ExtensionHost* host</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>content</name><operator>::</operator><name>JavaScriptDialogManager</name><operator>*</operator> <macro><name>GetJavaScriptDialogManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>CreateTab</name><argument_list>(<argument>std::unique_ptr&lt;content::WebContents&gt; web_contents</argument>,
                 <argument>const std::string&amp; extension_id</argument>,
                 <argument>WindowOpenDisposition disposition</argument>,
                 <argument>const gfx::Rect&amp; initial_rect</argument>,
                 <argument>bool user_gesture</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>ProcessMediaAccessRequest</name><argument_list>(<argument>content::WebContents* web_contents</argument>,
                                 <argument>const content::MediaStreamRequest&amp; request</argument>,
                                 <argument>content::MediaResponseCallback callback</argument>,
                                 <argument>const Extension* extension</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>CheckMediaAccessPermission</name><argument_list>(<argument>content::RenderFrameHost* render_frame_host</argument>,
                                  <argument>const GURL&amp; security_origin</argument>,
                                  <argument>blink::mojom::MediaStreamType type</argument>,
                                  <argument>const Extension* extension</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>ExtensionHostQueue</name><operator>*</operator> <macro><name>GetExtensionHostQueue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>content</name><operator>::</operator><name>PictureInPictureResult</name> <macro><name>EnterPictureInPicture</name><argument_list>(
      <argument>content::WebContents* web_contents</argument>,
      <argument>const viz::SurfaceId&amp; surface_id</argument>,
      <argument>const gfx::Size&amp; natural_size</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>ExitPictureInPicture</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomExtensionHostDelegate</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace extensions</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_HOST_DELEGATE_H_</comment>
</unit>
