<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/win/notify_icon_host.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_WIN_NOTIFY_ICON_HOST_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_WIN_NOTIFY_ICON_HOST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NotifyIcon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>NotifyIconHost</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>NotifyIconHost</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>NotifyIconHost</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>NotifyIcon</name><modifier>*</modifier></type> <name>CreateNotifyIcon</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Remove</name><parameter_list>(<parameter><decl><type><name>NotifyIcon</name><modifier>*</modifier></type> <name>notify_icon</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>NotifyIcon</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>NotifyIcons</name></expr>;</expr_stmt></typedef>

  <comment type="line">// Static callback invoked when a message comes in to our messaging window.</comment>
  <function_decl><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>WndProcStatic</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,
                                        <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,
                                        <parameter><decl><type><name>WPARAM</name></type> <name>wparam</name></decl></parameter>,
                                        <parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><name>LRESULT</name> <name>CALLBACK</name></type> <name>WndProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,
                           <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,
                           <parameter><decl><type><name>WPARAM</name></type> <name>wparam</name></decl></parameter>,
                           <parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><name>UINT</name></type> <name>NextIconId</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// The unique icon ID we will assign to the next icon.</comment>
  <decl_stmt><decl><type><name>UINT</name></type> <name>next_icon_id_</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// List containing all active NotifyIcons.</comment>
  <decl_stmt><decl><type><name>NotifyIcons</name></type> <name>notify_icons_</name></decl>;</decl_stmt>

  <comment type="line">// The window class of |window_|.</comment>
  <decl_stmt><decl><type><name>ATOM</name></type> <name>atom_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// The handle of the module that contains the window procedure of |window_|.</comment>
  <decl_stmt><decl><type><name>HMODULE</name></type> <name>instance_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// The window used for processing events.</comment>
  <decl_stmt><decl><type><name>HWND</name></type> <name>window_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// The message ID of the "TaskbarCreated" message, sent to us when we need to</comment>
  <comment type="line">// reset our status icons.</comment>
  <decl_stmt><decl><type><name>UINT</name></type> <name>taskbar_created_message_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NotifyIconHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_WIN_NOTIFY_ICON_HOST_H_</comment>
</unit>
