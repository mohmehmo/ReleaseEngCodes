<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/media/media_capture_devices_dispatcher.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE-CHROMIUM file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_MEDIA_MEDIA_CAPTURE_DEVICES_DISPATCHER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_MEDIA_MEDIA_CAPTURE_DEVICES_DISPATCHER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/singleton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/media_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/media_stream_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/common/mediastream/media_stream_request.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// This singleton is used to receive updates about media events from the content</comment>
<comment type="line">// layer.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>MediaCaptureDevicesDispatcher</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>MediaObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>MediaCaptureDevicesDispatcher</name><operator>*</operator> <call><name>GetInstance</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Methods for observers. Called on UI thread.</comment>
  <expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>MediaStreamDevices</name><operator>&amp;</operator> <call><name>GetAudioCaptureDevices</name><argument_list>()</argument_list></call></expr>;
  <expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>MediaStreamDevices</name><operator>&amp;</operator> <call><name>GetVideoCaptureDevices</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Helper to get the default devices which can be used by the media request.</comment>
  <comment type="line">// Uses the first available devices if the default devices are not available.</comment>
  <comment type="line">// If the return list is empty, it means there is no available device on the</comment>
  <comment type="line">// OS.</comment>
  <comment type="line">// Called on the UI thread.</comment>
  <expr><name>void</name> <macro><name>GetDefaultDevices</name><argument_list>(<argument>bool audio</argument>,
                         <argument>bool video</argument>,
                         <argument>blink::MediaStreamDevices* devices</argument>)</argument_list></macro></expr>;

  <comment type="line">// Helpers for picking particular requested devices, identified by raw id.</comment>
  <comment type="line">// If the device requested is not available it will return NULL.</comment>
  <expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>MediaStreamDevice</name><operator>*</operator> <call><name>GetRequestedAudioDevice</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>requested_audio_device_id</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>MediaStreamDevice</name><operator>*</operator> <call><name>GetRequestedVideoDevice</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>requested_video_device_id</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Returns the first available audio or video device, or NULL if no devices</comment>
  <comment type="line">// are available.</comment>
  <expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>MediaStreamDevice</name><operator>*</operator> <call><name>GetFirstAvailableAudioDevice</name><argument_list>()</argument_list></call></expr>;
  <expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>MediaStreamDevice</name><operator>*</operator> <call><name>GetFirstAvailableVideoDevice</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Unittests that do not require actual device enumeration should call this</comment>
  <comment type="line">// API on the singleton. It is safe to call this multiple times on the</comment>
  <comment type="line">// signleton.</comment>
  <expr><name>void</name> <call><name>DisableDeviceEnumerationForTesting</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Overridden from content::MediaObserver:</comment>
  <expr><name>void</name> <macro><name>OnAudioCaptureDevicesChanged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnVideoCaptureDevicesChanged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnMediaRequestStateChanged</name><argument_list>(<argument>int render_process_id</argument>,
                                  <argument>int render_view_id</argument>,
                                  <argument>int page_request_id</argument>,
                                  <argument>const GURL&amp; security_origin</argument>,
                                  <argument>blink::mojom::MediaStreamType stream_type</argument>,
                                  <argument>content::MediaRequestState state</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnCreatingAudioStream</name><argument_list>(<argument>int render_process_id</argument>,
                             <argument>int render_view_id</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnSetCapturingLinkSecured</name><argument_list>(<argument>int render_process_id</argument>,
                                 <argument>int render_frame_id</argument>,
                                 <argument>int page_request_id</argument>,
                                 <argument>blink::mojom::MediaStreamType stream_type</argument>,
                                 <argument>bool is_secure</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>friend</name> struct <name>base</name><operator>::</operator><name><name>DefaultSingletonTraits</name><argument_list type="generic">&lt;<argument><expr><name>MediaCaptureDevicesDispatcher</name></expr></argument>&gt;</argument_list></name></expr>;

  <expr><call><name>MediaCaptureDevicesDispatcher</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>MediaCaptureDevicesDispatcher</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// Only for testing, a list of cached audio capture devices.</comment>
  <expr><name>blink</name><operator>::</operator><name>MediaStreamDevices</name> <name>test_audio_devices_</name></expr>;

  <comment type="line">// Only for testing, a list of cached video capture devices.</comment>
  <expr><name>blink</name><operator>::</operator><name>MediaStreamDevices</name> <name>test_video_devices_</name></expr>;

  <comment type="line">// Flag used by unittests to disable device enumeration.</comment>
  <expr><name>bool</name> <name>is_device_enumeration_disabled_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>MediaCaptureDevicesDispatcher</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_MEDIA_MEDIA_CAPTURE_DEVICES_DISPATCHER_H_</comment>
</unit>
