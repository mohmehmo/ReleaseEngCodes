<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/crash_reporter/linux/crash_dump_handler.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Copyright (c) 2013 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_CRASH_REPORTER_LINUX_CRASH_DUMP_HANDLER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_CRASH_REPORTER_LINUX_CRASH_DUMP_HANDLER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"breakpad/src/common/simple_string_dictionary.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>crash_reporter</name> <block>{<block_content>

<typedef>typedef <expr_stmt><expr><name>google_breakpad</name><operator>::</operator><name><name>NonAllocatingMap</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>&gt;</argument_list></name> <name>CrashKeyStorage</name></expr>;</expr_stmt></typedef>

<comment type="line">// BreakpadInfo describes a crash report.</comment>
<comment type="line">// The minidump information can either be contained in a file descriptor (fd) or</comment>
<comment type="line">// in a file (whose path is in filename).</comment>
<struct>struct <name>BreakpadInfo</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>                       <comment type="line">// File descriptor to the Breakpad dump data.</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl>;</decl_stmt>         <comment type="line">// Path to the Breakpad dump data.</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>distro</name></decl>;</decl_stmt>           <comment type="line">// Linux distro string.</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>distro_length</name></decl>;</decl_stmt>       <comment type="line">// Length of |distro|.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>upload</name></decl>;</decl_stmt>                  <comment type="line">// Whether to upload or save crash dump.</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>process_start_time</name></decl>;</decl_stmt>  <comment type="line">// Uptime of the crashing process.</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>oom_size</name></decl>;</decl_stmt>              <comment type="line">// Amount of memory requested if OOM.</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>pid</name></decl>;</decl_stmt>                 <comment type="line">// PID where applicable.</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>upload_url</name></decl>;</decl_stmt>       <comment type="line">// URL to upload the minidump.</comment>
  <decl_stmt><decl><type><name>CrashKeyStorage</name><modifier>*</modifier></type> <name>crash_keys</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>HandleCrashDump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BreakpadInfo</name><modifier>&amp;</modifier></type> <name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>WriteLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>WriteNewline</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="line">// Global variable storing the path of upload log.</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>g_crash_log_path</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace crash_reporter</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_CRASH_REPORTER_LINUX_CRASH_DUMP_HANDLER_H_</comment>
</unit>
