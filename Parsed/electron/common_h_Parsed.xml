<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/notifications/win/win32_desktop_notifications/common.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_COMMON_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_COMMON_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<struct>struct <name>NotificationData</name> <block>{
  <decl_stmt><decl><type><name>DesktopNotificationController</name><modifier>*</modifier></type> <name>controller</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name>wstring</name> <name>caption</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>wstring</name> <name>body_text</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>HBITMAP</name></type> <name>image</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>NotificationData</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

  <expr_stmt><expr><operator>~</operator><macro><name>NotificationData</name><argument_list>()</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><name>image</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  }</block></expr></expr_stmt>

  <expr_stmt><expr><call><name>NotificationData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NotificationData</name><operator>&amp;</operator> <name>other</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>NotificationData</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>NotificationData</name><operator>&amp;</operator> <name>other</name><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>T</name></type> <name>ScaleForDpi</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dpi</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>source_dpi</name> <init>= <expr><literal type="number">96</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>value</name> <operator>*</operator> <name>dpi</name> <operator>/</operator> <name>source_dpi</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>ScreenMetrics</name> <block>{
  <decl_stmt><decl><type><name>UINT</name></type> <name>dpi_x</name></decl>, <decl><type ref="prev"/><name>dpi_y</name></decl>;</decl_stmt>

  <macro><name>ScreenMetrics</name><argument_list>()</argument_list></macro> <block>{<block_content>
    <typedef>typedef <function_decl><type><name>HRESULT</name> <name>WINAPI</name></type> <name>GetDpiForMonitor_t</name><parameter_list>(<parameter><decl><type><name>HMONITOR</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

    <decl_stmt><decl><type><name>auto</name></type> <name>GetDpiForMonitor</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>GetDpiForMonitor_t</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
        <argument><expr><call><name>GetProcAddress</name><argument_list>(<argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"shcore"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"GetDpiForMonitor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>GetDpiForMonitor</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>auto</name><operator>*</operator> <name>monitor</name> <operator>=</operator> <macro><name>MonitorFromPoint</name><argument_list>(<argument>{}</argument>, <argument>MONITOR_DEFAULTTOPRIMARY</argument>)</argument_list></macro></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>GetDpiForMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dpi_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dpi_y</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name> <init>= <expr><call><name>GetDC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>dpi_x</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>LOGPIXELSX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dpi_y</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>LOGPIXELSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>T</name></type> <name>X</name><argument_list>(<argument><expr><name>T</name> <name>value</name></expr></argument>)</argument_list> const <block>{<block_content>
    <return>return <expr><call><name>ScaleForDpi</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dpi_x</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>
  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>T</name></type> <name>Y</name><argument_list>(<argument><expr><name>T</name> <name>value</name></expr></argument>)</argument_list> const <block>{<block_content>
    <return>return <expr><call><name>ScaleForDpi</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dpi_y</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_COMMON_H_</comment>
</unit>
