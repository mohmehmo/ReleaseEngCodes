<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/event_emitter_caller.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_EVENT_EMITTER_CALLER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_EVENT_EMITTER_CALLER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/converter.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>

<decl_stmt><decl><type><name>using</name></type> <name>ValueVector</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>CallMethodWithArgs</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                        <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>obj</name></expr></argument>,
                                        <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>method</name></expr></argument>,
                                        <argument><expr><name>ValueVector</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace internal</comment>

<comment type="line">// obj.emit.apply(obj, name, args...);</comment>
<comment type="line">// The caller is responsible of allocating a HandleScope.</comment>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>StringType</name></expr></argument>&gt;</argument_list></name>
<name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>EmitEvent</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                               <argument>v8::Local&lt;v8::Object&gt; obj</argument>,
                               <argument>const StringType&amp; name</argument>,
                               <argument>const internal::ValueVector&amp; args</argument>)</argument_list></macro> <block>{
  <expr><name>internal</name><operator>::</operator><name>ValueVector</name> <name>concatenated_args</name> <operator>=</operator> <block>{<expr><name>gin</name><operator>::</operator><macro><name>StringToV8</name><argument_list>(<argument>isolate</argument>, <argument>name</argument>)</argument_list></macro></expr>}</block></expr>;
  <expr><call><name><name>concatenated_args</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name><name>args</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>concatenated_args</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>concatenated_args</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>args</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>args</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <return>return <expr><name>internal</name><operator>::</operator><call><name>CallMethodWithArgs</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"emit"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>concatenated_args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<comment type="line">// obj.emit(name, args...);</comment>
<comment type="line">// The caller is responsible of allocating a HandleScope.</comment>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>StringType</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>EmitEvent</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                               <argument>v8::Local&lt;v8::Object&gt; obj</argument>,
                               <argument>const StringType&amp; name</argument>,
                               <argument>Args&amp;&amp;... args</argument>)</argument_list></macro> <block>{
  <expr><name>internal</name><operator>::</operator><name>ValueVector</name> <name>converted_args</name> <operator>=</operator> <block>{
      <expr><name>gin</name><operator>::</operator><call><name>StringToV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>,
      <expr><name>gin</name><operator>::</operator><call><name>ConvertToV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>...</operator></expr>,
  }</block></expr>;
  <return>return <expr><name>internal</name><operator>::</operator><call><name>CallMethodWithArgs</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"emit"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>converted_args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<comment type="line">// obj.custom_emit(args...)</comment>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>CustomEmit</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                <argument>v8::Local&lt;v8::Object&gt; object</argument>,
                                <argument>const char* custom_emit</argument>,
                                <argument>Args&amp;&amp;... args</argument>)</argument_list></macro> <block>{
  <expr><name>internal</name><operator>::</operator><name>ValueVector</name> <name>converted_args</name> <operator>=</operator> <block>{
      <expr><name>gin</name><operator>::</operator><call><name>ConvertToV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>...</operator></expr>,
  }</block></expr>;
  <return>return <expr><name>internal</name><operator>::</operator><call><name>CallMethodWithArgs</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>custom_emit</name></expr></argument>,
                                      <argument><expr><operator>&amp;</operator><name>converted_args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin_helper</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_EVENT_EMITTER_CALLER_H_</comment>
</unit>
