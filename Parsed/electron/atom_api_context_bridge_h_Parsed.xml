<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/renderer/api/atom_api_context_bridge.h"><comment type="line">// Copyright (c) 2019 Slack Technologies, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_RENDERER_API_ATOM_API_CONTEXT_BRIDGE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RENDERER_API_ATOM_API_CONTEXT_BRIDGE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v8/include/v8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Arguments</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>context_bridge</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>RenderFramePersistenceStore</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ProxyFunctionWrapper</name><argument_list>(
    <argument>context_bridge::RenderFramePersistenceStore* store</argument>,
    <argument>size_t func_id</argument>,
    <argument>gin_helper::Arguments* args</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>v8</name><operator>::</operator><name><name>MaybeLocal</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateProxyForAPI</name><argument_list>(
    <argument>const v8::Local&lt;v8::Object&gt;&amp; api_object</argument>,
    <argument>const v8::Local&lt;v8::Context&gt;&amp; source_context</argument>,
    <argument>const v8::Local&lt;v8::Context&gt;&amp; target_context</argument>,
    <argument>context_bridge::RenderFramePersistenceStore* store</argument>,
    <argument>int recursion_depth</argument>)</argument_list></macro></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_RENDERER_API_ATOM_API_CONTEXT_BRIDGE_H_</comment>
</unit>
