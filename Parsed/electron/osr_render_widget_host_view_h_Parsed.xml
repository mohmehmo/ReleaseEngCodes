<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/osr/osr_render_widget_host_view.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_OSR_OSR_RENDER_WIDGET_HOST_VIEW_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_OSR_OSR_RENDER_WIDGET_HOST_VIEW_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/process/kill.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/threading/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/time/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/viz/common/frame_sinks/begin_frame_args.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/viz/common/frame_sinks/begin_frame_source.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/viz/common/quads/compositor_frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/viz/common/surfaces/parent_local_surface_id_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/browser/frame_host/render_widget_host_view_guest.h"</cpp:file></cpp:include>  <comment type="line">// nogncheck</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/browser/renderer_host/delegated_frame_host.h"</cpp:file></cpp:include>  <comment type="line">// nogncheck</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/browser/renderer_host/input/mouse_wheel_phase_handler.h"</cpp:file></cpp:include>  <comment type="line">// nogncheck</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/browser/renderer_host/render_widget_host_impl.h"</cpp:file></cpp:include>  <comment type="line">// nogncheck</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/browser/renderer_host/render_widget_host_view_base.h"</cpp:file></cpp:include>  <comment type="line">// nogncheck</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/browser/web_contents/web_contents_view.h"</cpp:file></cpp:include>  <comment type="line">// nogncheck</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/osr/osr_host_display_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/osr/osr_video_consumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/osr/osr_view_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/platform/web_vector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/skia/include/core/SkBitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/base/ime/text_input_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/compositor/compositor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/compositor/layer_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/compositor/layer_owner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/geometry/point.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/viz/host/host_display_client.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/win/window_impl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CursorManager</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace content</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomCopyFrameGenerator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AtomBeginFrameTimer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AtomDelegatedFrameHostClient</name></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator>, <specifier>const</specifier> <name>SkBitmap</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>OnPaintCallback</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>OnPopupPaintCallback</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>OffScreenRenderWidgetHostView</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>RenderWidgetHostViewBase</name></expr></range></decl>,
                                      <decl><type ref="prev"/><name>public</name> <name>ui</name>::<name>CompositorDelegate</name></decl>,
                                      <decl><type ref="prev"/><name>public</name> <name>OffscreenViewProxyObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <macro><name>OffScreenRenderWidgetHostView</name><argument_list>(<argument>bool transparent</argument>,
                                <argument>bool painting</argument>,
                                <argument>int frame_rate</argument>,
                                <argument>const OnPaintCallback&amp; callback</argument>,
                                <argument>content::RenderWidgetHost* render_widget_host</argument>,
                                <argument>OffScreenRenderWidgetHostView* parent_host_view</argument>,
                                <argument>gfx::Size initial_size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>OffScreenRenderWidgetHostView</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>content</name><operator>::</operator><name>BrowserAccessibilityManager</name><operator>*</operator> <macro><name>CreateBrowserAccessibilityManager</name><argument_list>(
      <argument>content::BrowserAccessibilityDelegate*</argument>,
      <argument>bool</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// content::RenderWidgetHostView:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>InitAsChild</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>NativeView</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>NativeView</name> <macro><name>GetNativeView</name><argument_list>(<argument>void</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>NativeViewAccessible</name> <macro><name>GetNativeViewAccessible</name><argument_list>(<argument>void</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ui</name><operator>::</operator><name>TextInputClient</name><operator>*</operator> <macro><name>GetTextInputClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>Focus</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>HasFocus</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>uint32_t</name> <macro><name>GetCaptureSequenceNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsSurfaceAvailableForCopy</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>Show</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>Hide</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsShowing</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>EnsureSurfaceSynchronizedForWebTest</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetViewBounds</name><argument_list>(<argument>void</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetVisibleViewportSize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetInsets</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Insets</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetBackgroundColor</name><argument_list>(<argument><expr><name>SkColor</name> <name>color</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>SkColor</name></expr></argument>&gt;</argument_list></name> <macro><name>GetBackgroundColor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>UpdateBackgroundColor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>LockMouse</name><argument_list>(<argument><expr><name>bool</name> <name>request_unadjusted_movement</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>UnlockMouse</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>TakeFallbackContentFrom</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderWidgetHostView</name><operator>*</operator> <name>view</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetNeedsBeginFrames</name><argument_list>(<argument><expr><name>bool</name> <name>needs_begin_frames</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>SetWantsAnimateOnlyBeginFrames</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>SetActive</name><argument_list>(<argument><expr><name>bool</name> <name>active</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>ShowDefinitionForSelection</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>SpeakSelection</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <function_decl><type><name>bool</name></type> <name>UpdateNSViewAndDisplay</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// defined(OS_MACOSX)</comment>

  <comment type="line">// content::RenderWidgetHostViewBase:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>DidCreateNewRendererCompositorFrameSink</name><argument_list>(
      <argument><expr><name>viz</name><operator>::</operator><name>mojom</name><operator>::</operator><name>CompositorFrameSinkClient</name><operator>*</operator> <name>renderer_compositor_frame_sink</name></expr></argument>)</argument_list>
      <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SubmitCompositorFrame</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>viz</name><operator>::</operator><name>LocalSurfaceId</name><operator>&amp;</operator> <name>local_surface_id</name></expr></argument>,
      <argument><expr><name>viz</name><operator>::</operator><name>CompositorFrame</name> <name>frame</name></expr></argument>,
      <argument><expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>viz</name><operator>::</operator><name>HitTestRegionList</name></expr></argument>&gt;</argument_list></name> <name>hit_test_region_list</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>void</name> <macro><name>ResetFallbackToFirstNavigationSurface</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>InitAsPopup</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderWidgetHostView</name><operator>*</operator> <name>rwhv</name></expr></argument>,
                   <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>rect</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>InitAsFullscreen</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderWidgetHostView</name><operator>*</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>UpdateCursor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>WebCursor</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetIsLoading</name><argument_list>(<argument><expr><name>bool</name> <name>is_loading</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>TextInputStateChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>TextInputState</name><operator>&amp;</operator> <name>params</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ImeCancelComposition</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>RenderProcessGone</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>Destroy</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetTooltipText</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>CursorManager</name><operator>*</operator> <macro><name>GetCursorManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>CopyFromSurface</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>src_rect</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>output_size</name></expr></argument>,
      <argument><expr><name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>SkBitmap</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>GetScreenInfo</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>ScreenInfo</name><operator>*</operator> <name>results</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>InitAsGuest</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderWidgetHostView</name><operator>*</operator></expr></argument>,
                   <argument><expr><name>content</name><operator>::</operator><name>RenderWidgetHostViewGuest</name><operator>*</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>TransformPointToRootSurface</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>PointF</name><operator>*</operator> <name>point</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetBoundsInRootWindow</name><argument_list>(<argument>void</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>viz</name><operator>::</operator><name>SurfaceId</name> <macro><name>GetCurrentSurfaceId</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>SyntheticGestureTarget</name></expr></argument>&gt;</argument_list></name>
  <macro><name>CreateSyntheticGestureTarget</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ImeCompositionRangeChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Range</name><operator>&amp;</operator></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>gfx</name><operator>::</operator><name>Rect</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetCompositorViewportPixelSize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>content</name><operator>::</operator><name>RenderWidgetHostViewBase</name><operator>*</operator> <macro><name>CreateViewForWidget</name><argument_list>(
      <argument>content::RenderWidgetHost*</argument>,
      <argument>content::RenderWidgetHost*</argument>,
      <argument>content::WebContentsView*</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <expr_stmt><expr><specifier>const</specifier> <name>viz</name><operator>::</operator><name>LocalSurfaceIdAllocation</name><operator>&amp;</operator> <macro><name>GetLocalSurfaceIdAllocation</name><argument_list>()</argument_list></macro>
      <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>viz</name><operator>::</operator><name>FrameSinkId</name><operator>&amp;</operator> <macro><name>GetFrameSinkId</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>void</name> <macro><name>DidNavigate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>TransformPointToCoordSpaceForView</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>PointF</name><operator>&amp;</operator> <name>point</name></expr></argument>,
      <argument><expr><name>RenderWidgetHostViewBase</name><operator>*</operator> <name>target_view</name></expr></argument>,
      <argument><expr><name>gfx</name><operator>::</operator><name>PointF</name><operator>*</operator> <name>transformed_point</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// ui::CompositorDelegate:</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>viz</name><operator>::</operator><name>HostDisplayClient</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateHostDisplayClient</name><argument_list>(
      <argument>ui::Compositor* compositor</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <function_decl><type><name>bool</name></type> <name>InstallTransparency</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>OnBeginFrameTimerTick</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>SendBeginFrame</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>TimeTicks</name> <name>frame_time</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>TimeDelta</name> <name>vsync_period</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>CancelWidget</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>AddGuestHostView</name><parameter_list>(<parameter><decl><type><name>OffScreenRenderWidgetHostView</name><modifier>*</modifier></type> <name>guest_host</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>RemoveGuestHostView</name><parameter_list>(<parameter><decl><type><name>OffScreenRenderWidgetHostView</name><modifier>*</modifier></type> <name>guest_host</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>AddViewProxy</name><parameter_list>(<parameter><decl><type><name>OffscreenViewProxy</name><modifier>*</modifier></type> <name>proxy</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>RemoveViewProxy</name><parameter_list>(<parameter><decl><type><name>OffscreenViewProxy</name><modifier>*</modifier></type> <name>proxy</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>ProxyViewDestroyed</name><argument_list>(<argument><expr><name>OffscreenViewProxy</name><operator>*</operator> <name>proxy</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>OnPaint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>damage_rect</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SkBitmap</name><operator>&amp;</operator> <name>bitmap</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnPopupPaint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>damage_rect</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnProxyViewPaint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>damage_rect</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <call><name>SizeInPixels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>CompositeFrame</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>damage_rect</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>bool</name> <macro><name>IsPopupWidget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><name>widget_type_</name> <operator>==</operator> <name>content</name><operator>::</operator><name>WidgetType</name><operator>::</operator><name>kPopup</name></expr>;</return>
  }</block></expr></expr_stmt>

  <function><type><specifier>const</specifier> <name>SkBitmap</name><modifier>&amp;</modifier></type> <name>GetBacking</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><call><name><name>backing_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

  <function_decl><type><name>void</name></type> <name>HoldResize</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ReleaseResize</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SynchronizeVisualProperties</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>void</name></type> <name>SendMouseEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebMouseEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SendMouseWheelEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebMouseWheelEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>SetPainting</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>painting</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>bool</name> <macro><name>IsPainting</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>SetFrameRate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>frame_rate</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>int</name> <macro><name>GetFrameRate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <expr_stmt><expr><name>ui</name><operator>::</operator><name>Compositor</name><operator>*</operator> <macro><name>GetCompositor</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>ui</name><operator>::</operator><name>Layer</name><operator>*</operator> <macro><name>GetRootLayer</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <expr_stmt><expr><name>content</name><operator>::</operator><name>DelegatedFrameHost</name><operator>*</operator> <macro><name>GetDelegatedFrameHost</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>Invalidate</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>InvalidateBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>content</name><operator>::</operator><name>RenderWidgetHostImpl</name><operator>*</operator> <macro><name>render_widget_host</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><name>render_widget_host_</name></expr>;</return>
  }</block></expr></expr_stmt>

  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>size_</name></expr>;</return> }</block></expr></expr_stmt>

  <function><type><name>void</name></type> <name>set_popup_host_view</name><parameter_list>(<parameter><decl><type><name>OffScreenRenderWidgetHostView</name><modifier>*</modifier></type> <name>popup_view</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>popup_host_view_</name> <operator>=</operator> <name>popup_view</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>set_child_host_view</name><parameter_list>(<parameter><decl><type><name>OffScreenRenderWidgetHostView</name><modifier>*</modifier></type> <name>child_view</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>child_host_view_</name> <operator>=</operator> <name>child_view</name></expr>;</expr_stmt>
  </block_content>}</block></function>

 <label><name>private</name>:</label>
  <function_decl><type><name>void</name></type> <name>SetupFrameRate</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ResizeRootLayer</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>viz</name><operator>::</operator><name>FrameSinkId</name> <macro><name>AllocateFrameSinkId</name><argument_list>(<argument>bool is_guest_view_hack</argument>)</argument_list></macro></expr>;</expr_stmt>

  <comment type="line">// Applies background color without notifying the RenderWidget about</comment>
  <comment type="line">// opaqueness changes.</comment>
  <function_decl><type><name>void</name></type> <name>UpdateBackgroundColorFromRenderer</name><parameter_list>(<parameter><decl><type><name>SkColor</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Weak ptrs.</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>RenderWidgetHostImpl</name><operator>*</operator> <name>render_widget_host_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>OffScreenRenderWidgetHostView</name><modifier>*</modifier></type> <name>parent_host_view_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OffScreenRenderWidgetHostView</name><modifier>*</modifier></type> <name>popup_host_view_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OffScreenRenderWidgetHostView</name><modifier>*</modifier></type> <name>child_host_view_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>OffScreenRenderWidgetHostView</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>guest_host_views_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>OffscreenViewProxy</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>proxy_views_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>transparent_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OnPaintCallback</name></type> <name>callback_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OnPopupPaintCallback</name></type> <name>parent_callback_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>frame_rate_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>frame_rate_threshold_us_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name>Time</name> <name>last_time_</name> <operator>=</operator> <name>base</name><operator>::</operator><name>Time</name><operator>::</operator><call><name>Now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Vector2dF</name> <name>last_scroll_offset_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <name>size_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>painting_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>is_showing_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>is_destroyed_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <name>popup_position_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>hold_resize_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>pending_resize_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>paint_callback_running_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>viz</name><operator>::</operator><name>LocalSurfaceIdAllocation</name> <name>delegated_frame_host_allocation_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>viz</name><operator>::</operator><name>ParentLocalSurfaceIdAllocator</name> <name>delegated_frame_host_allocator_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>viz</name><operator>::</operator><name>LocalSurfaceIdAllocation</name> <name>compositor_allocation_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>viz</name><operator>::</operator><name>ParentLocalSurfaceIdAllocator</name> <name>compositor_allocator_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ui</name><operator>::</operator><name>Layer</name></expr></argument>&gt;</argument_list></name> <name>root_layer_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ui</name><operator>::</operator><name>Compositor</name></expr></argument>&gt;</argument_list></name> <name>compositor_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>DelegatedFrameHost</name></expr></argument>&gt;</argument_list></name> <name>delegated_frame_host_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>CursorManager</name></expr></argument>&gt;</argument_list></name> <name>cursor_manager_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomBeginFrameTimer</name></expr></argument>&gt;</argument_list></name> <name>begin_frame_timer_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>OffScreenHostDisplayClient</name><modifier>*</modifier></type> <name>host_display_client_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>OffScreenVideoConsumer</name></expr></argument>&gt;</argument_list></name> <name>video_consumer_</name></expr>;</expr_stmt>

  <comment type="line">// Provides |source_id| for BeginFrameArgs that we create.</comment>
  <expr_stmt><expr><name>viz</name><operator>::</operator><name>StubBeginFrameSource</name> <name>begin_frame_source_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>begin_frame_number_</name> <init>= <expr><name>viz</name><operator>::</operator><name>BeginFrameArgs</name><operator>::</operator><name>kStartingFrameNumber</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomDelegatedFrameHostClient</name></expr></argument>&gt;</argument_list></name> <name>delegated_frame_host_client_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>content</name><operator>::</operator><name>MouseWheelPhaseHandler</name> <name>mouse_wheel_phase_handler_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>viz</name><operator>::</operator><name>mojom</name><operator>::</operator><name>CompositorFrameSinkClient</name><operator>*</operator> <name>renderer_compositor_frame_sink_</name> <operator>=</operator>
      <name>nullptr</name></expr>;</expr_stmt>

  <comment type="line">// Latest capture sequence number which is incremented when the caller</comment>
  <comment type="line">// requests surfaces be synchronized via</comment>
  <comment type="line">// EnsureSurfaceSynchronizedForWebTest().</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>latest_capture_sequence_number_</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SkColor</name></type> <name>background_color_</name> <init>= <expr><call><name>SkColor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SkBitmap</name></expr></argument>&gt;</argument_list></name> <name>backing_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>OffScreenRenderWidgetHostView</name></expr></argument>&gt;</argument_list></name> <name>weak_ptr_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>OffScreenRenderWidgetHostView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_OSR_OSR_RENDER_WIDGET_HOST_VIEW_H_</comment>
</unit>
