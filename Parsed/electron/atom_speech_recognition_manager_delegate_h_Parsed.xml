<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/atom_speech_recognition_manager_delegate.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_ATOM_SPEECH_RECOGNITION_MANAGER_DELEGATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_ATOM_SPEECH_RECOGNITION_MANAGER_DELEGATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/speech_recognition_event_listener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/speech_recognition_manager_delegate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomSpeechRecognitionManagerDelegate</name>
    <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>SpeechRecognitionManagerDelegate</name></expr></range></decl>,
      <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>SpeechRecognitionEventListener</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>AtomSpeechRecognitionManagerDelegate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>AtomSpeechRecognitionManagerDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// content::SpeechRecognitionEventListener:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnRecognitionStart</name><argument_list>(<argument><expr><name>int</name> <name>session_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnAudioStart</name><argument_list>(<argument><expr><name>int</name> <name>session_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnEnvironmentEstimationComplete</name><argument_list>(<argument><expr><name>int</name> <name>session_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnSoundStart</name><argument_list>(<argument><expr><name>int</name> <name>session_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnSoundEnd</name><argument_list>(<argument><expr><name>int</name> <name>session_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnAudioEnd</name><argument_list>(<argument><expr><name>int</name> <name>session_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnRecognitionEnd</name><argument_list>(<argument><expr><name>int</name> <name>session_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnRecognitionResults</name><argument_list>(
      <argument><expr><name>int</name> <name>session_id</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>SpeechRecognitionResultPtr</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnRecognitionError</name><argument_list>(
      <argument><expr><name>int</name> <name>session_id</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>SpeechRecognitionError</name><operator>&amp;</operator> <name>error</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnAudioLevelsChange</name><argument_list>(<argument><expr><name>int</name> <name>session_id</name></expr></argument>,
                           <argument><expr><name>float</name> <name>volume</name></expr></argument>,
                           <argument><expr><name>float</name> <name>noise_volume</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// content::SpeechRecognitionManagerDelegate:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>CheckRecognitionIsAllowed</name><argument_list>(
      <argument><expr><name>int</name> <name>session_id</name></expr></argument>,
      <argument><expr><name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>bool</name> <name>ask_user</name>, <name>bool</name> <name>is_allowed</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>callback</name></expr></argument>)</argument_list>
      <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>SpeechRecognitionEventListener</name><operator>*</operator> <macro><name>GetEventListener</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>FilterProfanities</name><argument_list>(<argument><expr><name>int</name> <name>render_process_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomSpeechRecognitionManagerDelegate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_ATOM_SPEECH_RECOGNITION_MANAGER_DELEGATE_H_</comment>
</unit>
