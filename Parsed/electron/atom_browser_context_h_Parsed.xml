<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/atom_browser_context.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_ATOM_BROWSER_CONTEXT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_ATOM_BROWSER_CONTEXT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/ref_counted_delete_on_sequence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/net/proxy_config_monitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/predictors/preconnect_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/browser_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/resource_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/buildflags/buildflags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/network_context.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/url_loader_factory.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/media/media_device_id_salt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>PrefRegistrySimple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PrefService</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ValueMapPrefStore</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>network</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SharedURLLoaderFactory</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>storage</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SpecialStoragePolicy</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_ELECTRON_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>namespace</name></type> <name>extensions</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionSystem</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AtomDownloadManagerDelegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AtomPermissionManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CookieChangeNotifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ResolveProxyHelper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SpecialStoragePolicy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WebViewManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserContext</name>
    <range>: <expr><name>public</name> <name>base</name><operator>::</operator><name><name>RefCountedDeleteOnSequence</name><argument_list type="generic">&lt;<argument><expr><name>AtomBrowserContext</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
      <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>BrowserContext</name></decl>,
      <decl><type ref="prev"/><name>public</name> <name>network</name>::<name>mojom</name>::<name>TrustedURLLoaderAuthClient</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// partition_id =&gt; browser_context</comment>
  <struct>struct <name>PartitionKey</name> <block>{
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>partition</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>in_memory</name></decl>;</decl_stmt>

    <macro><name>PartitionKey</name><argument_list>(<argument>const std::string&amp; partition</argument>, <argument>bool in_memory</argument>)</argument_list></macro>
        : <expr_stmt><expr><call><name>partition</name><argument_list>(<argument><expr><name>partition</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>in_memory</name><argument_list>(<argument>in_memory</argument>)</argument_list></macro> <expr><block>{}</block>

    <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>PartitionKey</name><operator>&amp;</operator> <name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
      <if_stmt><if>if <condition>(<expr><name>partition</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>partition</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>in_memory</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>in_memory</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
      <return>return <expr><name>partition</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>partition</name></name></expr>;</return>
    }</block>

    <decl><name>bool</name> <name>operator</name>==<argument_list>(<argument><expr><specifier>const</specifier> <name>PartitionKey</name><operator>&amp;</operator> <name>other</name></expr></argument>)</argument_list> const <block>{<block_content>
      <return>return <expr><operator>(</operator><name>partition</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>partition</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>in_memory</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>in_memory</name></name><operator>)</operator></expr>;</return>
    </block_content>}</block></decl>
  <decl/></struct></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
  <decl_stmt><decl><type><name>using</name></type> <name>BrowserContextMap</name> <init>=
      <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>PartitionKey</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>AtomBrowserContext</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Get or create the BrowserContext according to its |partition| and</comment>
  <comment type="line">// |in_memory|. The |options| will be passed to constructor when there is no</comment>
  <comment type="line">// existing BrowserContext.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomBrowserContext</name></expr></argument>&gt;</argument_list></name></type> <name>From</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>partition</name></expr></argument>,
      <argument><expr><name>bool</name> <name>in_memory</name></expr></argument>,
      <argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name> <name>options</name> <operator>=</operator> <name>base</name><operator>::</operator><call><name>DictionaryValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function><type><specifier>static</specifier> <name>BrowserContextMap</name></type> <name>browser_context_map</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>browser_context_map_</name></expr>;</return>
  </block_content>}</block></function>

  <decl_stmt><decl><type><name>void</name></type> <name>SetUserAgent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>user_agent</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetUserAgent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>CanUseHttpCache</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>int</name> <macro><name>GetMaxCacheSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>ResolveProxyHelper</name><modifier>*</modifier></type> <name>GetResolveProxyHelper</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>predictors</name><operator>::</operator><name>PreconnectManager</name><operator>*</operator> <call><name>GetPreconnectManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>SharedURLLoaderFactory</name></expr></argument>&gt;</argument_list></name></type> <name>GetURLLoaderFactory</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// content::BrowserContext:</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <macro><name>GetPath</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsOffTheRecord</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>ResourceContext</name><operator>*</operator> <macro><name>GetResourceContext</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>ZoomLevelDelegate</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateZoomLevelDelegate</name><argument_list>(
      <argument>const base::FilePath&amp; partition_path</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>PushMessagingService</name><operator>*</operator> <macro><name>GetPushMessagingService</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>SSLHostStateDelegate</name><operator>*</operator> <macro><name>GetSSLHostStateDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>BackgroundFetchDelegate</name><operator>*</operator> <macro><name>GetBackgroundFetchDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>BackgroundSyncController</name><operator>*</operator> <macro><name>GetBackgroundSyncController</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>BrowsingDataRemoverDelegate</name><operator>*</operator> <macro><name>GetBrowsingDataRemoverDelegate</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetMediaDeviceIDSalt</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>DownloadManagerDelegate</name><operator>*</operator> <macro><name>GetDownloadManagerDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>BrowserPluginGuestManager</name><operator>*</operator> <macro><name>GetGuestManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>PermissionControllerDelegate</name><operator>*</operator> <macro><name>GetPermissionControllerDelegate</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>storage</name><operator>::</operator><name>SpecialStoragePolicy</name><operator>*</operator> <macro><name>GetSpecialStoragePolicy</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>ClientHintsControllerDelegate</name><operator>*</operator> <macro><name>GetClientHintsControllerDelegate</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>StorageNotificationService</name><operator>*</operator> <macro><name>GetStorageNotificationService</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// extensions deps</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>SetCorsOriginAccessListForOrigin</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>url</name><operator>::</operator><name>Origin</name><operator>&amp;</operator> <name>source_origin</name></expr></argument>,
      <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>CorsOriginPatternPtr</name></expr></argument>&gt;</argument_list></name> <name>allow_patterns</name></expr></argument>,
      <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>CorsOriginPatternPtr</name></expr></argument>&gt;</argument_list></name> <name>block_patterns</name></expr></argument>,
      <argument><expr><name>base</name><operator>::</operator><name>OnceClosure</name> <name>closure</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>CookieChangeNotifier</name><operator>*</operator> <macro><name>cookie_change_notifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><call><name><name>cookie_change_notifier_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>
  <function><type><name>ProxyConfigMonitor</name><modifier>*</modifier></type> <name>proxy_config_monitor</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>proxy_config_monitor_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <expr_stmt><expr><name>PrefService</name><operator>*</operator> <macro><name>prefs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>prefs_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
  <function><type><name>void</name></type> <name>set_in_memory_pref_store</name><parameter_list>(<parameter><decl><type><name>ValueMapPrefStore</name><modifier>*</modifier></type> <name>pref_store</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>in_memory_pref_store_</name> <operator>=</operator> <name>pref_store</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  <expr_stmt><expr><name>ValueMapPrefStore</name><operator>*</operator> <macro><name>in_memory_pref_store</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><name>in_memory_pref_store_</name></expr>;</return>
  }</block></expr></expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>AtomBrowserContext</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWeakPtr</name><argument_list>()</argument_list></macro> <block>{
    <return>return <expr><call><name><name>weak_factory_</name><operator>.</operator><name>GetWeakPtr</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

 <label><name>protected</name>:</label>
  <macro><name>AtomBrowserContext</name><argument_list>(<argument>const std::string&amp; partition</argument>,
                     <argument>bool in_memory</argument>,
                     <argument>base::DictionaryValue options</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>AtomBrowserContext</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>friend</name> <name>class</name> <name>base</name><operator>::</operator><name><name>RefCountedDeleteOnSequence</name><argument_list type="generic">&lt;<argument><expr><name>AtomBrowserContext</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>friend</name> <name>class</name> <name>base</name><operator>::</operator><name><name>DeleteHelper</name><argument_list type="generic">&lt;<argument><expr><name>AtomBrowserContext</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>OnLoaderCreated</name><argument_list>(<argument><expr><name>int32_t</name> <name>request_id</name></expr></argument>,
                       <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingReceiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>TrustedAuthClient</name></expr></argument>&gt;</argument_list></name>
                           <name>header_client</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// Initialize pref registry.</comment>
  <function_decl><type><name>void</name></type> <name>InitPrefs</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><specifier>static</specifier> <name>BrowserContextMap</name></type> <name>browser_context_map_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>ValueMapPrefStore</name><modifier>*</modifier></type> <name>in_memory_pref_store_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>ResourceContext</name></expr></argument>&gt;</argument_list></name> <name>resource_context_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CookieChangeNotifier</name></expr></argument>&gt;</argument_list></name> <name>cookie_change_notifier_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PrefService</name></expr></argument>&gt;</argument_list></name> <name>prefs_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomDownloadManagerDelegate</name></expr></argument>&gt;</argument_list></name> <name>download_manager_delegate_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WebViewManager</name></expr></argument>&gt;</argument_list></name> <name>guest_manager_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomPermissionManager</name></expr></argument>&gt;</argument_list></name> <name>permission_manager_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MediaDeviceIDSalt</name></expr></argument>&gt;</argument_list></name> <name>media_device_id_salt_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>ResolveProxyHelper</name></expr></argument>&gt;</argument_list></name></type> <name>resolve_proxy_helper_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>storage</name><operator>::</operator><name>SpecialStoragePolicy</name></expr></argument>&gt;</argument_list></name></type> <name>storage_policy_</name></decl>;</decl_stmt>

  <comment type="line">// Tracks the ProxyConfig to use, and passes any updates to a NetworkContext</comment>
  <comment type="line">// ProxyConfigClient.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ProxyConfigMonitor</name></expr></argument>&gt;</argument_list></name> <name>proxy_config_monitor_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>predictors</name><operator>::</operator><name>PreconnectManager</name></expr></argument>&gt;</argument_list></name> <name>preconnect_manager_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>user_agent_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <name>path_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>in_memory_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>use_cache_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>max_cache_size_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_ELECTRON_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Owned by the KeyedService system.</comment>
  <expr_stmt><expr><name>extensions</name><operator>::</operator><name>AtomExtensionSystem</name><operator>*</operator> <name>extension_system_</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Shared URLLoaderFactory.</comment>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>SharedURLLoaderFactory</name></expr></argument>&gt;</argument_list></name></type> <name>url_loader_factory_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>Receiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>TrustedURLLoaderAuthClient</name></expr></argument>&gt;</argument_list></name> <name>auth_client_</name><block>{<expr><name>this</name></expr>}</block></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>AtomBrowserContext</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomBrowserContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_ATOM_BROWSER_CONTEXT_H_</comment>
</unit>
