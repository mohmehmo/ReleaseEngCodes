<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/extensions/atom_extensions_api_provider.h"><comment type="line">// Copyright 2018 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_EXTENSIONS_ATOM_EXTENSIONS_API_PROVIDER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_EXTENSIONS_ATOM_EXTENSIONS_API_PROVIDER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensions/common/extensions_api_provider.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionsAPIProvider</name> <range>: <expr><name>public</name> <name>extensions</name><operator>::</operator><name>ExtensionsAPIProvider</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>AtomExtensionsAPIProvider</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomExtensionsAPIProvider</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// ExtensionsAPIProvider:</comment>
  <expr><name>void</name> <macro><name>AddAPIFeatures</name><argument_list>(<argument>extensions::FeatureProvider* provider</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddManifestFeatures</name><argument_list>(<argument>extensions::FeatureProvider* provider</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddPermissionFeatures</name><argument_list>(<argument>extensions::FeatureProvider* provider</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddBehaviorFeatures</name><argument_list>(<argument>extensions::FeatureProvider* provider</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddAPIJSONSources</name><argument_list>(
      <argument>extensions::JSONFeatureProviderSource* json_source</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsAPISchemaGenerated</name><argument_list>(<argument>const std::string&amp; name</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>base</name><operator>::</operator><name>StringPiece</name> <macro><name>GetAPISchema</name><argument_list>(<argument>const std::string&amp; name</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RegisterPermissions</name><argument_list>(
      <argument>extensions::PermissionsInfo* permissions_info</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RegisterManifestHandlers</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomExtensionsAPIProvider</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_EXTENSIONS_ATOM_EXTENSIONS_API_PROVIDER_H_</comment>
</unit>
