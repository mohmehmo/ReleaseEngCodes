<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/key_weak_map.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_KEY_WEAK_MAP_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_KEY_WEAK_MAP_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v8/include/v8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Like ES6's WeakMap, but the key is Integer and the value is Weak Pointer.</comment>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>KeyWeakMap</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Records the key and self, used by SetWeak.</comment>
  <struct>struct <name>KeyObject</name> <block>{
    <decl_stmt><decl><type><name>K</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>KeyWeakMap</name><modifier>*</modifier></type> <name>self</name></decl>;</decl_stmt>
  }</block>;</struct>

  <macro><name>KeyWeakMap</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>KeyWeakMap</name><argument_list>()</argument_list></macro> <block>{
    <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>p</name> <operator>:</operator> <name>map_</name></expr></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>ClearWeak</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  }</block></expr></expr_stmt>

  <comment type="line">// Sets the object to WeakMap with the given |key|.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>Set</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>object</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name>KeyObject</name></type> <name>key_object</name> <init>= <expr><block>{<expr><name>key</name></expr>, <expr><name>this</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>p</name> <operator>=</operator> <name><name>map_</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator>
        <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>key_object</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><call><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>second</name><operator>.</operator><name>SetWeak</name></name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>)</operator></expr></argument>, <argument><expr><name>OnObjectGC</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name>WeakCallbackType</name><operator>::</operator><name>kParameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></decl></decl_stmt>

  <comment type="line">// Gets the object from WeakMap by its |key|.</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>MaybeLocal</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <macro><name>Get</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>const K&amp; key</argument>)</argument_list></macro> <block>{
    <expr><name>auto</name> <name>iter</name> <operator>=</operator> <call><name><name>map_</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <call><name><name>map_</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>v8</name><operator>::</operator><call><name><name>MaybeLocal</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <return>return <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>New</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
  }</block></expr></expr_stmt>

  <comment type="line">// Whethere there is an object with |key| in this WeakMap.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>Has</name><argument_list>(<argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name><name>map_</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>map_</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

  <comment type="line">// Returns all objects.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <macro><name>Values</name><argument_list>(<argument>v8::Isolate* isolate</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
    <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>keys</name></expr>;
    <expr><call><name><name>keys</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>map_</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>it</name> <range>: <expr><name>map_</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>New</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block></expr></expr_stmt>
    <return>return <expr><name>keys</name></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <comment type="line">// Remove object with |key| in the WeakMap.</comment>
  <function><type><name>void</name></type> <name>Remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>map_</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <call><name><name>map_</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>iter</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>ClearWeak</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map_</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>OnObjectGC</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>v8</name><operator>::</operator><name><name>WeakCallbackInfo</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>KeyObject</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>data</name></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>KeyObject</name><operator>*</operator> <name>key_object</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>GetParameter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key_object</name><operator>-&gt;</operator><name>self</name><operator>-&gt;</operator><name>Remove</name></name><argument_list>(<argument><expr><name><name>key_object</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></decl></decl_stmt>

  <comment type="line">// Map of stored objects.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>KeyObject</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>map_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>KeyWeakMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_KEY_WEAK_MAP_H_</comment>
</unit>
