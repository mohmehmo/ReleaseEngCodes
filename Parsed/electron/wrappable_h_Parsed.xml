<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/wrappable.h"><comment type="line">// Copyright 2013 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE.chromium file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_WRAPPABLE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_WRAPPABLE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/bind.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/per_isolate_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/constructor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>FromV8Impl</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace internal</comment>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Wrappable</name> <range>: <expr><name>public</name> <name>WrappableBase</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>Wrappable</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

  <expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Sig</name></expr></argument>&gt;</argument_list></name>
  <specifier>static</specifier> <name>void</name> <macro><name>SetConstructor</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                             <argument>const base::Callback&lt;Sig&gt;&amp; constructor</argument>)</argument_list></macro> <block>{
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>templ</name> <operator>=</operator> <call><name>CreateFunctionTemplate</name><argument_list>(
        <argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><call><name>Bind</name><argument_list>(<argument><expr><operator>&amp;</operator><name>internal</name><operator>::</operator><name><name>InvokeNew</name><argument_list type="generic">&lt;<argument><expr><name>Sig</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>constructor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>templ</name><operator>-&gt;</operator><name>InstanceTemplate</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>SetInternalFieldCount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>T</name><operator>::</operator><call><name>BuildPrototype</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>templ</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>gin</name><operator>::</operator><name>PerIsolateData</name><operator>::</operator><call><name>From</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>SetFunctionTemplate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kWrapperInfo</name></expr></argument>,
                                                            <argument><expr><name>templ</name></expr></argument>)</argument_list></call></expr>;
  }</block>

  <specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <macro><name>GetConstructor</name><argument_list>(<argument>v8::Isolate* isolate</argument>)</argument_list></macro> <block>{
    <comment type="line">// Fill the object template.</comment>
    <expr><name>auto</name><operator>*</operator> <name>data</name> <operator>=</operator> <name>gin</name><operator>::</operator><name>PerIsolateData</name><operator>::</operator><call><name>From</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>auto</name> <name>templ</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>GetFunctionTemplate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>kWrapperInfo</name></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><call><name><name>templ</name><operator>.</operator><name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>templ</name> <operator>=</operator> <name>v8</name><operator>::</operator><name>FunctionTemplate</name><operator>::</operator><call><name>New</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>templ</name><operator>-&gt;</operator><name>InstanceTemplate</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>SetInternalFieldCount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>T</name><operator>::</operator><call><name>BuildPrototype</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>templ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>SetFunctionTemplate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>kWrapperInfo</name></expr></argument>, <argument><expr><name>templ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
    return templ</block><empty_stmt>;</empty_stmt></if></if_stmt>
  }</block>

 <name>protected</name><operator>:</operator>
  <comment type="line">// Init the class with T::BuildPrototype.</comment>
  <name>void</name> <macro><name>Init</name><argument_list>(<argument>v8::Isolate* isolate</argument>)</argument_list></macro> <block>{
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>templ</name> <operator>=</operator> <call><name>GetConstructor</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// |wrapper| may be empty in some extreme cases, e.g., when</comment>
    <comment type="line">// Object.prototype.constructor is overwritten.</comment>
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>wrapper</name></expr>;
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>templ</name><operator>-&gt;</operator><name>InstanceTemplate</name></name><argument_list>()</argument_list></call>
             <operator>-&gt;</operator><call><name>NewInstance</name><argument_list>(<argument><expr><call><name><name>isolate</name><operator>-&gt;</operator><name>GetCurrentContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
             <operator>.</operator><call><name>ToLocal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wrapper</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// The current wrappable object will be no longer managed by V8. Delete</comment>
      <comment type="line">// this now.</comment>
      <decl_stmt><decl><type><name>delete</name></type> <name>this</name></decl>;</decl_stmt>
      <return>return;</return>
    <expr_stmt/>}</block_content>
    InitWith(isolate</block><operator>,</operator> <expr_stmt><expr><name>wrapper</name></expr></expr_stmt></if></if_stmt>)</block></expr>;
  }</block>

 <name>private</name><operator>:</operator>
  <specifier>static</specifier> <name>gin</name><operator>::</operator><name>WrapperInfo</name> <name>kWrapperInfo</name></expr></range></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>Wrappable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// static</comment>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>gin</name><operator>::</operator><name>WrapperInfo</name> <name><name>Wrappable</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>kWrapperInfo</name> <operator>=</operator> <block>{<expr><name>gin</name><operator>::</operator><name>kEmbedderNativeGin</name></expr>}</block></expr>;</expr_stmt>

}  <comment type="line">// namespace gin_helper</comment>

namespace <macro><name>gin</name></macro> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;
    <argument><expr><name>T</name><operator>*</operator></expr></argument>,
    <argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
        <argument><expr><name>std</name><operator>::</operator><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>WrappableBase</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>T* val</argument>)</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>val</name><operator>-&gt;</operator><name>GetWrapper</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <return>return <expr><name>v8</name><operator>::</operator><call><name>Null</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt></block></expr>
  }</block>

  <specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>v8::Local&lt;v8::Value&gt; val</argument>, <argument>T** out</argument>)</argument_list></macro> <block>{
    <expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>gin_helper</name><operator>::</operator><name>WrappableBase</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
        <argument><expr><name>gin_helper</name><operator>::</operator><name>internal</name><operator>::</operator><call><name>FromV8Impl</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><operator>*</operator><name>out</name> <operator>!=</operator> <name>nullptr</name></expr>;</return>
  }</block></expr></expr_stmt>
</block_content>}</block><empty_stmt>;</empty_stmt>

}  <comment type="line">// namespace gin</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_WRAPPABLE_H_</comment>
</unit>
