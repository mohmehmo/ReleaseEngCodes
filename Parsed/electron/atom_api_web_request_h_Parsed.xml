<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_web_request.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_WEB_REQUEST_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_WEB_REQUEST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensions/common/url_pattern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/arguments.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/wrappable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/net/proxying_url_loader_factory.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BrowserContext</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>WebRequest</name> <range>: <expr><name>public</name> <name>gin</name><operator>::</operator><name><name>Wrappable</name><argument_list type="generic">&lt;<argument><expr><name>WebRequest</name></expr></argument>&gt;</argument_list></name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>WebRequestAPI</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name>WrapperInfo</name> <name>kWrapperInfo</name></expr>;</expr_stmt>

  <comment type="line">// Return the WebRequest object attached to |browser_context|, create if there</comment>
  <comment type="line">// is no one.</comment>
  <comment type="line">// Note that the lifetime of WebRequest object is managed by Session, instead</comment>
  <comment type="line">// of the caller.</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>WebRequest</name></expr></argument>&gt;</argument_list></name> <call><name>FromOrCreate</name><argument_list>(
      <argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Return a new WebRequest object, this should only be called by Session.</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>WebRequest</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(
      <argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Find the WebRequest object attached to |browser_context|.</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>WebRequest</name></expr></argument>&gt;</argument_list></name> <call><name>From</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                      <argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// gin::Wrappable:</comment>
  <expr_stmt><expr><name>gin</name><operator>::</operator><name>ObjectTemplateBuilder</name> <macro><name>GetObjectTemplateBuilder</name><argument_list>(
      <argument>v8::Isolate* isolate</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>GetTypeName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><call><name>WebRequest</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>WebRequest</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// WebRequestAPI:</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>HasListener</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>OnBeforeRequest</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                      <argument><expr><name>net</name><operator>::</operator><name>CompletionOnceCallback</name> <name>callback</name></expr></argument>,
                      <argument><expr><name>GURL</name><operator>*</operator> <name>new_url</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>OnBeforeSendHeaders</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                          <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                          <argument><expr><name>BeforeSendHeadersCallback</name> <name>callback</name></expr></argument>,
                          <argument><expr><name>net</name><operator>::</operator><name>HttpRequestHeaders</name><operator>*</operator> <name>headers</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>OnHeadersReceived</name><argument_list>(
      <argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
      <argument><expr><name>net</name><operator>::</operator><name>CompletionOnceCallback</name> <name>callback</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>HttpResponseHeaders</name><operator>*</operator> <name>original_response_headers</name></expr></argument>,
      <argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>HttpResponseHeaders</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>override_response_headers</name></expr></argument>,
      <argument><expr><name>GURL</name><operator>*</operator> <name>allowed_unsafe_redirect_url</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnSendHeaders</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>HttpRequestHeaders</name><operator>&amp;</operator> <name>headers</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnBeforeRedirect</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                        <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                        <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>new_location</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnResponseStarted</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnErrorOccurred</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                       <argument><expr><name>int</name> <name>net_error</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnCompleted</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                   <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                   <argument><expr><name>int</name> <name>net_error</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnRequestWillBeDestroyed</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <enum>enum <name>SimpleEvent</name> <block>{
    <decl><name>kOnSendHeaders</name></decl>,
    <decl><name>kOnBeforeRedirect</name></decl>,
    <decl><name>kOnResponseStarted</name></decl>,
    <decl><name>kOnCompleted</name></decl>,
    <decl><name>kOnErrorOccurred</name></decl>,
  }</block>;</enum>
  <enum>enum <name>ResponseEvent</name> <block>{
    <decl><name>kOnBeforeRequest</name></decl>,
    <decl><name>kOnBeforeSendHeaders</name></decl>,
    <decl><name>kOnHeadersReceived</name></decl>,
  }</block>;</enum>

  <decl_stmt><decl><type><name>using</name></type> <name>SimpleListener</name> <init>= <expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>using</name></type> <name>ResponseCallback</name> <init>= <expr><name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>using</name></type> <name>ResponseListener</name> <init>=
      <expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>, <name>ResponseCallback</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>SimpleEvent</name> <name>event</name></expr></argument>&gt;</argument_list></name>
  <name>void</name></type> <name>SetSimpleListener</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>ResponseEvent</name> <name>event</name></expr></argument>&gt;</argument_list></name>
  <name>void</name></type> <name>SetResponseListener</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Listener</name></expr></argument>, <argument><expr><name>typename</name> <name>Listeners</name></expr></argument>, <argument><expr><name>typename</name> <name>Event</name></expr></argument>&gt;</argument_list></name>
  <name>void</name></type> <name>SetListener</name><argument_list>(<argument><expr><name>Event</name> <name>event</name></expr></argument>, <argument><expr><name>Listeners</name><operator>*</operator> <name>listeners</name></expr></argument>, <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
  <name>void</name></type> <name>HandleSimpleEvent</name><argument_list>(<argument><expr><name>SimpleEvent</name> <name>event</name></expr></argument>,
                         <argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                         <argument><expr><name>Args</name><operator>...</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Out</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
  <name>int</name></type> <name>HandleResponseEvent</name><argument_list>(<argument><expr><name>ResponseEvent</name> <name>event</name></expr></argument>,
                          <argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                          <argument><expr><name>net</name><operator>::</operator><name>CompletionOnceCallback</name> <name>callback</name></expr></argument>,
                          <argument><expr><name>Out</name> <name>out</name></expr></argument>,
                          <argument><expr><name>Args</name><operator>...</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>void</name></type> <name>OnListenerResult</name><argument_list>(<argument><expr><name>uint64_t</name> <name>id</name></expr></argument>, <argument><expr><name>T</name> <name>out</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>response</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <struct>struct <name>SimpleListenerInfo</name> <block>{
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>URLPattern</name></expr></argument>&gt;</argument_list></name> <name>url_patterns</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SimpleListener</name></type> <name>listener</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SimpleListenerInfo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>URLPattern</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>SimpleListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SimpleListenerInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>SimpleListenerInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block>;</struct>

  <struct>struct <name>ResponseListenerInfo</name> <block>{
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>URLPattern</name></expr></argument>&gt;</argument_list></name> <name>url_patterns</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ResponseListener</name></type> <name>listener</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ResponseListenerInfo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>URLPattern</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>ResponseListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ResponseListenerInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>ResponseListenerInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block>;</struct>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>SimpleEvent</name></expr></argument>, <argument><expr><name>SimpleListenerInfo</name></expr></argument>&gt;</argument_list></name> <name>simple_listeners_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ResponseEvent</name></expr></argument>, <argument><expr><name>ResponseListenerInfo</name></expr></argument>&gt;</argument_list></name> <name>response_listeners_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>net</name><operator>::</operator><name>CompletionOnceCallback</name></expr></argument>&gt;</argument_list></name> <name>callbacks_</name></expr>;</expr_stmt>

  <comment type="line">// Weak-ref, it manages us.</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context_</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_WEB_REQUEST_H_</comment>
</unit>
