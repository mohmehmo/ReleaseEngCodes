<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/skia_util.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_SKIA_UTIL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_SKIA_UTIL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/image/image_skia.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>util</name> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>PopulateImageSkiaRepsFromPath</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>ImageSkia</name><operator>*</operator> <name>image</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>AddImageSkiaRepFromBuffer</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>ImageSkia</name><operator>*</operator> <name>image</name></expr></argument>,
                               <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <name>data</name></expr></argument>,
                               <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
                               <argument><expr><name>int</name> <name>width</name></expr></argument>,
                               <argument><expr><name>int</name> <name>height</name></expr></argument>,
                               <argument><expr><name>double</name> <name>scale_factor</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>AddImageSkiaRepFromJPEG</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>ImageSkia</name><operator>*</operator> <name>image</name></expr></argument>,
                             <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <name>data</name></expr></argument>,
                             <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
                             <argument><expr><name>double</name> <name>scale_factor</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>AddImageSkiaRepFromPNG</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>ImageSkia</name><operator>*</operator> <name>image</name></expr></argument>,
                            <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <name>data</name></expr></argument>,
                            <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
                            <argument><expr><name>double</name> <name>scale_factor</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>ReadImageSkiaFromICO</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>ImageSkia</name><operator>*</operator> <name>image</name></expr></argument>, <argument><expr><name>HICON</name> <name>icon</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace util</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_SKIA_UTIL_H_</comment>
</unit>
