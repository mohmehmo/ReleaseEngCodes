<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/native_window_views.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NATIVE_WINDOW_VIEWS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NATIVE_WINDOW_VIEWS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/native_window.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/widget/widget_observer.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/win/scoped_gdi_object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/win/taskbar_host.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>views</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>UnhandledKeyboardEventHandler</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>GlobalMenuBarX11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RootView</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WindowStateWatcher</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>EventDisabler</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>NativeWindowViews</name> <range>: <expr><name>public</name> <name>NativeWindow</name></expr></range></decl>,
                          <decl><type ref="prev"/><name>public</name> <name>views</name>::<name>WidgetObserver</name></decl>,
                          <decl><type ref="prev"/><name>public</name> <name>ui</name>::<name>EventHandler</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>NativeWindowViews</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>,
                    <argument><expr><name>NativeWindow</name><operator>*</operator> <name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>NativeWindowViews</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// NativeWindow:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>SetContentView</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <name>view</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>Close</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>CloseImmediately</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>Focus</name><argument_list>(<argument><expr><name>bool</name> <name>focus</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsFocused</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>Show</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>ShowInactive</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>Hide</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsVisible</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsEnabled</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetEnabled</name><argument_list>(<argument><expr><name>bool</name> <name>enable</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>Maximize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>Unmaximize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsMaximized</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>Minimize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>Restore</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsMinimized</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetFullScreen</name><argument_list>(<argument><expr><name>bool</name> <name>fullscreen</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsFullscreen</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>bounds</name></expr></argument>, <argument><expr><name>bool</name> <name>animate</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetBounds</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetContentBounds</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetContentSize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetNormalBounds</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetContentSizeConstraints</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>extensions</name><operator>::</operator><name>SizeConstraints</name><operator>&amp;</operator> <name>size_constraints</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetResizable</name><argument_list>(<argument><expr><name>bool</name> <name>resizable</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>MoveAbove</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>sourceId</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>MoveTop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsResizable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetAspectRatio</name><argument_list>(<argument><expr><name>double</name> <name>aspect_ratio</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>extra_size</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetMovable</name><argument_list>(<argument><expr><name>bool</name> <name>movable</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsMovable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetMinimizable</name><argument_list>(<argument><expr><name>bool</name> <name>minimizable</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsMinimizable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetMaximizable</name><argument_list>(<argument><expr><name>bool</name> <name>maximizable</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsMaximizable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetFullScreenable</name><argument_list>(<argument><expr><name>bool</name> <name>fullscreenable</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsFullScreenable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetClosable</name><argument_list>(<argument><expr><name>bool</name> <name>closable</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsClosable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetAlwaysOnTop</name><argument_list>(<argument><expr><name>ui</name><operator>::</operator><name>ZOrderLevel</name> <name>z_order</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>level</name></expr></argument>,
                      <argument><expr><name>int</name> <name>relativeLevel</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>ui</name><operator>::</operator><name>ZOrderLevel</name> <macro><name>GetZOrderLevel</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>Center</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>Invalidate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetTitle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>title</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetTitle</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>FlashFrame</name><argument_list>(<argument><expr><name>bool</name> <name>flash</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetSkipTaskbar</name><argument_list>(<argument><expr><name>bool</name> <name>skip</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetExcludedFromShownWindowsMenu</name><argument_list>(<argument><expr><name>bool</name> <name>excluded</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsExcludedFromShownWindowsMenu</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetSimpleFullScreen</name><argument_list>(<argument><expr><name>bool</name> <name>simple_fullscreen</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsSimpleFullScreen</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetKiosk</name><argument_list>(<argument><expr><name>bool</name> <name>kiosk</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsKiosk</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetBackgroundColor</name><argument_list>(<argument><expr><name>SkColor</name> <name>color</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetHasShadow</name><argument_list>(<argument><expr><name>bool</name> <name>has_shadow</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>HasShadow</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetOpacity</name><argument_list>(<argument><expr><specifier>const</specifier> <name>double</name> <name>opacity</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>double</name> <macro><name>GetOpacity</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetIgnoreMouseEvents</name><argument_list>(<argument><expr><name>bool</name> <name>ignore</name></expr></argument>, <argument><expr><name>bool</name> <name>forward</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetContentProtection</name><argument_list>(<argument><expr><name>bool</name> <name>enable</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetFocusable</name><argument_list>(<argument><expr><name>bool</name> <name>focusable</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetMenu</name><argument_list>(<argument><expr><name>AtomMenuModel</name><operator>*</operator> <name>menu_model</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>AddBrowserView</name><argument_list>(<argument><expr><name>NativeBrowserView</name><operator>*</operator> <name>browser_view</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RemoveBrowserView</name><argument_list>(<argument><expr><name>NativeBrowserView</name><operator>*</operator> <name>browser_view</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetParentWindow</name><argument_list>(<argument><expr><name>NativeWindow</name><operator>*</operator> <name>parent</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>NativeView</name> <macro><name>GetNativeView</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>NativeWindow</name> <macro><name>GetNativeWindow</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetOverlayIcon</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Image</name><operator>&amp;</operator> <name>overlay</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>description</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetProgressBar</name><argument_list>(<argument><expr><name>double</name> <name>progress</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ProgressState</name> <name>state</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetAutoHideMenuBar</name><argument_list>(<argument><expr><name>bool</name> <name>auto_hide</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsMenuBarAutoHide</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetMenuBarVisibility</name><argument_list>(<argument><expr><name>bool</name> <name>visible</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsMenuBarVisible</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>SetVisibleOnAllWorkspaces</name><argument_list>(<argument><expr><name>bool</name> <name>visible</name></expr></argument>,
                                 <argument><expr><name>bool</name> <name>visibleOnFullScreen</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>bool</name> <macro><name>IsVisibleOnAllWorkspaces</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>SetGTKDarkThemeEnabled</name><argument_list>(<argument><expr><name>bool</name> <name>use_dark_theme</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>content</name><operator>::</operator><name>DesktopMediaID</name> <macro><name>GetDesktopMediaID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>AcceleratedWidget</name> <macro><name>GetAcceleratedWidget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>NativeWindowHandle</name> <macro><name>GetNativeWindowHandle</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>ContentBoundsToWindowBounds</name><argument_list>(<argument>const gfx::Rect&amp; bounds</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>WindowBoundsToContentBounds</name><argument_list>(<argument>const gfx::Rect&amp; bounds</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>UpdateDraggableRegions</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SkRegion</name></expr></argument>&gt;</argument_list></name> <name>region</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>IncrementChildModals</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>DecrementChildModals</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Catch-all message handling and filtering. Called before</comment>
  <comment type="line">// HWNDMessageHandler's built-in handling, which may pre-empt some</comment>
  <comment type="line">// expectations in Views/Aura if messages are consumed. Returns true if the</comment>
  <comment type="line">// message was consumed by the delegate and should not be processed further</comment>
  <comment type="line">// by the HWNDMessageHandler. In this case, |result| is returned. |result| is</comment>
  <comment type="line">// not modified otherwise.</comment>
  <function_decl><type><name>bool</name></type> <name>PreHandleMSG</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,
                    <parameter><decl><type><name>WPARAM</name></type> <name>w_param</name></decl></parameter>,
                    <parameter><decl><type><name>LPARAM</name></type> <name>l_param</name></decl></parameter>,
                    <parameter><decl><type><name>LRESULT</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetIcon</name><parameter_list>(<parameter><decl><type><name>HICON</name></type> <name>small_icon</name></decl></parameter>, <parameter><decl><type><name>HICON</name></type> <name>app_icon</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_X11</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>void</name></type> <name>SetIcon</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>ImageSkia</name><operator>&amp;</operator> <name>icon</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>SkRegion</name><operator>*</operator> <macro><name>draggable_region</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>draggable_region_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <function><type><name>TaskbarHost</name><modifier>&amp;</modifier></type> <name>taskbar_host</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>taskbar_host_</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 <label><name>private</name>:</label>
  <comment type="line">// views::WidgetObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWidgetActivationChanged</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>Widget</name><operator>*</operator> <name>widget</name></expr></argument>, <argument><expr><name>bool</name> <name>active</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWidgetBoundsChanged</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>Widget</name><operator>*</operator> <name>widget</name></expr></argument>,
                             <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>bounds</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWidgetDestroying</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>Widget</name><operator>*</operator> <name>widget</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// views::WidgetDelegate:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>DeleteDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <macro><name>GetInitiallyFocusedView</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>CanResize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>CanMaximize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>CanMinimize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetWindowTitle</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <macro><name>GetContentsView</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ShouldDescendIntoChildForEventHandling</name><argument_list>(
      <argument><expr><name>gfx</name><operator>::</operator><name>NativeView</name> <name>child</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>location</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>views</name><operator>::</operator><name>ClientView</name><operator>*</operator> <macro><name>CreateClientView</name><argument_list>(<argument>views::Widget* widget</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>views</name><operator>::</operator><name>NonClientFrameView</name><operator>*</operator> <macro><name>CreateNonClientFrameView</name><argument_list>(
      <argument>views::Widget* widget</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWidgetMove</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>bool</name></type> <name>ExecuteWindowsCommand</name><argument_list>(<argument><expr><name>int</name> <name>command_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <function_decl><type><name>void</name></type> <name>HandleSizeEvent</name><parameter_list>(<parameter><decl><type><name>WPARAM</name></type> <name>w_param</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>l_param</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetForwardMouseMessages</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>forward</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>SubclassProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,
                                       <parameter><decl><type><name>UINT</name></type> <name>msg</name></decl></parameter>,
                                       <parameter><decl><type><name>WPARAM</name></type> <name>w_param</name></decl></parameter>,
                                       <parameter><decl><type><name>LPARAM</name></type> <name>l_param</name></decl></parameter>,
                                       <parameter><decl><type><name>UINT_PTR</name></type> <name>subclass_id</name></decl></parameter>,
                                       <parameter><decl><type><name>DWORD_PTR</name></type> <name>ref_data</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>MouseHookProc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n_code</name></decl></parameter>,
                                        <parameter><decl><type><name>WPARAM</name></type> <name>w_param</name></decl></parameter>,
                                        <parameter><decl><type><name>LPARAM</name></type> <name>l_param</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Enable/disable:</comment>
  <function_decl><type><name>bool</name></type> <name>ShouldBeEnabled</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetEnabledInternal</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// NativeWindow:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>HandleKeyboardEvent</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>NativeWebKeyboardEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// ui::EventHandler:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnMouseEvent</name><argument_list>(<argument><expr><name>ui</name><operator>::</operator><name>MouseEvent</name><operator>*</operator> <name>event</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Returns the restore state for the window.</comment>
  <expr_stmt><expr><name>ui</name><operator>::</operator><name>WindowShowState</name> <call><name>GetRestoredState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Maintain window placement.</comment>
  <function_decl><type><name>void</name></type> <name>MoveBehindTaskBarIfNeeded</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RootView</name></expr></argument>&gt;</argument_list></name> <name>root_view_</name></expr>;</expr_stmt>

  <comment type="line">// The view should be focused by default.</comment>
  <expr_stmt><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <name>focused_view_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

  <comment type="line">// The "resizable" flag on Linux is implemented by setting size constraints,</comment>
  <comment type="line">// we need to make sure size constraints are restored when window becomes</comment>
  <comment type="line">// resizable again. This is also used on Windows, to keep taskbar resize</comment>
  <comment type="line">// events from resizing the window.</comment>
  <expr_stmt><expr><name>extensions</name><operator>::</operator><name>SizeConstraints</name> <name>old_size_constraints_</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>GlobalMenuBarX11</name></expr></argument>&gt;</argument_list></name> <name>global_menu_bar_</name></expr>;</expr_stmt>

  <comment type="line">// Handles window state events.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WindowStateWatcher</name></expr></argument>&gt;</argument_list></name> <name>window_state_watcher_</name></expr>;</expr_stmt>

  <comment type="line">// To disable the mouse events.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>EventDisabler</name></expr></argument>&gt;</argument_list></name> <name>event_disabler_</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

  <expr_stmt><expr><name>ui</name><operator>::</operator><name>WindowShowState</name> <name>last_window_state_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <name>last_normal_placement_bounds_</name></expr>;</expr_stmt>

  <comment type="line">// In charge of running taskbar related APIs.</comment>
  <decl_stmt><decl><type><name>TaskbarHost</name></type> <name>taskbar_host_</name></decl>;</decl_stmt>

  <comment type="line">// Memoized version of a11y check</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>checked_for_a11y_support_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Whether to show the WS_THICKFRAME style.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>thick_frame_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// The bounds of window before maximize/fullscreen.</comment>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <name>restore_bounds_</name></expr>;</expr_stmt>

  <comment type="line">// The icons of window and taskbar.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>win</name><operator>::</operator><name>ScopedHICON</name> <name>window_icon_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>win</name><operator>::</operator><name>ScopedHICON</name> <name>app_icon_</name></expr>;</expr_stmt>

  <comment type="line">// The set of windows currently forwarding mouse messages.</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindowViews</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>forwarding_windows_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>HHOOK</name></type> <name>mouse_hook_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>forwarding_mouse_messages_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HWND</name></type> <name>legacy_window_</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>layered_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Set to true if the window is always on top and behind the task bar.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>behind_task_bar_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Handles unhandled keyboard messages coming back from the renderer process.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name>UnhandledKeyboardEventHandler</name></expr></argument>&gt;</argument_list></name> <name>keyboard_event_handler_</name></expr>;</expr_stmt>

  <comment type="line">// For custom drag, the whole window is non-draggable and the draggable region</comment>
  <comment type="line">// has to been explicitly provided.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SkRegion</name></expr></argument>&gt;</argument_list></name> <name>draggable_region_</name></expr>;</expr_stmt>  <comment type="line">// used in custom drag.</comment>

  <comment type="line">// Whether the window should be enabled based on user calls to SetEnabled()</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>is_enabled_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// How many modal children this window has;</comment>
  <comment type="line">// used to determine enabled state</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_modal_children_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>use_content_size_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>movable_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>resizable_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>maximizable_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>minimizable_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>fullscreenable_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>title_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <name>widget_size_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>opacity_</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NativeWindowViews</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NATIVE_WINDOW_VIEWS_H_</comment>
</unit>
