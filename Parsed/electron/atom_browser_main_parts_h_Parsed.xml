<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/atom_browser_main_parts.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_ATOM_BROWSER_MAIN_PARTS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_ATOM_BROWSER_MAIN_PARTS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/metrics/field_trial.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/timer/timer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/browser_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/browser_main_parts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/common/main_function_params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/buildflags/buildflags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/device/public/mojom/geolocation_control.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/layout/layout_provider.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>BrowserProcess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IconManager</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_AURA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>namespace</name></type> <name>wm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>WMState</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Browser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ElectronBindings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>JavascriptEnvironment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NodeBindings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NodeDebugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NodeEnvironment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BridgeTaskRunner</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_ELECTRON_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionsClient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionsBrowserClient</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TOOLKIT_VIEWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>ViewsDelegate</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>ViewsDelegateMac</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserMainParts</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>BrowserMainParts</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>AtomBrowserMainParts</name><argument_list>(<argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>MainFunctionParams</name><operator>&amp;</operator> <name>params</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomBrowserMainParts</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><specifier>static</specifier> <name>AtomBrowserMainParts</name><operator>*</operator> <call><name>Get</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Sets the exit code, will fail if the message loop is not ready.</comment>
  <expr><name>bool</name> <macro><name>SetExitCode</name><argument_list>(<argument>int code</argument>)</argument_list></macro></expr>;

  <comment type="line">// Gets the exit code</comment>
  <expr><name>int</name> <call><name>GetExitCode</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Register a callback that should be destroyed before JavaScript environment</comment>
  <comment type="line">// gets destroyed.</comment>
  <comment type="line">// Returns a closure that can be used to remove |callback| from the list.</comment>
  <expr><name>void</name> <macro><name>RegisterDestructionCallback</name><argument_list>(<argument>base::OnceClosure callback</argument>)</argument_list></macro></expr>;

  <comment type="line">// Returns the connection to GeolocationControl which can be</comment>
  <comment type="line">// used to enable the location services once per client.</comment>
  <expr><name>device</name><operator>::</operator><name>mojom</name><operator>::</operator><name>GeolocationControl</name><operator>*</operator> <call><name>GetGeolocationControl</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Returns handle to the class responsible for extracting file icons.</comment>
  <expr><name>IconManager</name><operator>*</operator> <call><name>GetIconManager</name><argument_list>()</argument_list></call></expr>;

  <expr><name>Browser</name><operator>*</operator> <macro><name>browser</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>browser_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
  <name>BrowserProcessImpl</name><operator>*</operator> <macro><name>browser_process</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>fake_browser_process_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

 <name>protected</name><operator>:</operator>
  <comment type="line">// content::BrowserMainParts:</comment>
  <name>int</name> <macro><name>PreEarlyInitialization</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PostEarlyInitialization</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>int</name> <macro><name>PreCreateThreads</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>ToolkitInitialized</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PreMainMessageLoopRun</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>MainMessageLoopRun</name><argument_list>(<argument>int* result_code</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PreDefaultMainMessageLoopRun</name><argument_list>(<argument>base::OnceClosure quit_closure</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PostMainMessageLoopStart</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PostMainMessageLoopRun</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PreMainMessageLoopStart</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PostCreateThreads</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PostDestroyThreads</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>void</name> <call><name>PreMainMessageLoopStartCommon</name><argument_list>()</argument_list></call></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Set signal handlers.</comment>
  <expr><name>void</name> <call><name>HandleSIGCHLD</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>HandleShutdownSignals</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr><name>void</name> <call><name>FreeAppDelegate</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>RegisterURLHandler</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>InitializeMainNib</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ViewsDelegateMac</name></expr></argument>&gt;</argument_list></name> <name>views_delegate_</name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ViewsDelegate</name></expr></argument>&gt;</argument_list></name> <name>views_delegate_</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_AURA</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>wm</name><operator>::</operator><name>WMState</name></expr></argument>&gt;</argument_list></name> <name>wm_state_</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name>LayoutProvider</name></expr></argument>&gt;</argument_list></name> <name>layout_provider_</name></expr>;

  <comment type="line">// A fake BrowserProcess object that used to feed the source code from chrome.</comment>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BrowserProcessImpl</name></expr></argument>&gt;</argument_list></name> <name>fake_browser_process_</name></expr>;

  <comment type="line">// Pointer to exit code.</comment>
  <expr><name>int</name><operator>*</operator> <name>exit_code_</name> <operator>=</operator> <name>nullptr</name></expr>;

  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Browser</name></expr></argument>&gt;</argument_list></name> <name>browser_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>JavascriptEnvironment</name></expr></argument>&gt;</argument_list></name> <name>js_env_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NodeBindings</name></expr></argument>&gt;</argument_list></name> <name>node_bindings_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ElectronBindings</name></expr></argument>&gt;</argument_list></name> <name>electron_bindings_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NodeEnvironment</name></expr></argument>&gt;</argument_list></name> <name>node_env_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NodeDebugger</name></expr></argument>&gt;</argument_list></name> <name>node_debugger_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IconManager</name></expr></argument>&gt;</argument_list></name> <name>icon_manager_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>FieldTrialList</name></expr></argument>&gt;</argument_list></name> <name>field_trial_list_</name></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_ELECTRON_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomExtensionsClient</name></expr></argument>&gt;</argument_list></name> <name>extensions_client_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomExtensionsBrowserClient</name></expr></argument>&gt;</argument_list></name> <name>extensions_browser_client_</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr><name>base</name><operator>::</operator><name>RepeatingTimer</name> <name>gc_timer_</name></expr>;

  <comment type="line">// List of callbacks should be executed before destroying JS env.</comment>
  <expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>OnceClosure</name></expr></argument>&gt;</argument_list></name> <name>destructors_</name></expr>;

  <expr><name>device</name><operator>::</operator><name>mojom</name><operator>::</operator><name>GeolocationControlPtr</name> <name>geolocation_control_</name></expr>;

  <expr><specifier>static</specifier> <name>AtomBrowserMainParts</name><operator>*</operator> <name>self_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomBrowserMainParts</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_ATOM_BROWSER_MAIN_PARTS_H_</comment>
</unit>
