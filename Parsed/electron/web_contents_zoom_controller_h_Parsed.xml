<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/web_contents_zoom_controller.h"><comment type="line">// Copyright (c) 2017 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_WEB_CONTENTS_ZOOM_CONTROLLER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_WEB_CONTENTS_ZOOM_CONTROLLER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/host_zoom_map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_user_data.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Manages the zoom changes of WebContents.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>WebContentsZoomController</name>
    <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>WebContentsObserver</name></expr></range></decl>,
      <decl><type ref="prev"/><name>public</name> <name>content</name>::<name><name>WebContentsUserData</name><argument_list type="generic">&lt;<argument><expr><name>WebContentsZoomController</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>class</name></type> <name>Observer</name> <range>: <expr><name>public</name> <name>base</name><operator>::</operator><name>CheckedObserver</name> <block>{
   <expr><name>public</name><operator>:</operator>
    <name>virtual</name> <name>void</name> <macro><name>OnZoomLevelChanged</name><argument_list>(<argument>content::WebContents* web_contents</argument>,
                                    <argument>double level</argument>,
                                    <argument>bool is_temporary</argument>)</argument_list></macro> <block>{}</block>
    <name>virtual</name> <name>void</name> <macro><name>OnZoomControllerWebContentsDestroyed</name><argument_list>()</argument_list></macro> <block>{}</block>

   <name>protected</name><operator>:</operator>
    <operator>~</operator><macro><name>Observer</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block></expr>
  }</block></expr></range></decl>;</decl_stmt>

  <comment type="line">// Defines how zoom changes are handled.</comment>
  <decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ZoomMode</name> <block>{<block_content>
    <comment type="line">// Results in default zoom behavior, i.e. zoom changes are handled</comment>
    <comment type="line">// automatically and on a per-origin basis, meaning that other tabs</comment>
    <comment type="line">// navigated to the same origin will also zoom.</comment>
    <expr_stmt><expr><name>DEFAULT</name></expr><operator>,</operator>
    <comment type="line">// Results in zoom changes being handled automatically, but on a per-tab</comment>
    <comment type="line">// basis. Tabs in this zoom mode will not be affected by zoom changes in</comment>
    <comment type="line">// other tabs, and vice versa.</comment>
    <expr><name>ISOLATED</name></expr><operator>,</operator>
    <comment type="line">// Overrides the automatic handling of zoom changes. The |onZoomChange|</comment>
    <comment type="line">// event will still be dispatched, but the page will not actually be zoomed.</comment>
    <comment type="line">// These zoom changes can be handled manually by listening for the</comment>
    <comment type="line">// |onZoomChange| event. Zooming in this mode is also on a per-tab basis.</comment>
    <expr><name>MANUAL</name></expr><operator>,</operator>
    <comment type="line">// Disables all zooming in this tab. The tab will revert to the default</comment>
    <comment type="line">// zoom level, and all attempted zoom changes will be ignored.</comment>
    <expr><name>DISABLED</name></expr><operator>,</operator></expr_stmt>
  </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

  <decl_stmt><decl><type><name>explicit</name></type> <name>WebContentsZoomController</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>WebContentsZoomController</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>AddObserver</name><parameter_list>(<parameter><decl><type><name>Observer</name><modifier>*</modifier></type> <name>observer</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>RemoveObserver</name><parameter_list>(<parameter><decl><type><name>Observer</name><modifier>*</modifier></type> <name>observer</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>SetEmbedderZoomController</name><parameter_list>(<parameter><decl><type><name>WebContentsZoomController</name><modifier>*</modifier></type> <name>controller</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Methods for managing zoom levels.</comment>
  <function_decl><type><name>void</name></type> <name>SetZoomLevel</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>double</name></type> <name>GetZoomLevel</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetDefaultZoomFactor</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>factor</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>double</name></type> <name>GetDefaultZoomFactor</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetTemporaryZoomLevel</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>UsesTemporaryZoomLevel</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Sets the zoom mode, which defines zoom behavior (see enum ZoomMode).</comment>
  <function_decl><type><name>void</name></type> <name>SetZoomMode</name><parameter_list>(<parameter><decl><type><name>ZoomMode</name></type> <name>zoom_mode</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>ResetZoomModeOnNavigationIfNeeded</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GURL</name><modifier>&amp;</modifier></type> <name>url</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>ZoomMode</name> <macro><name>zoom_mode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>zoom_mode_</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Convenience method to get default zoom level. Implemented here for</comment>
  <comment type="line">// inlining.</comment>
  <expr_stmt><expr><name>double</name> <macro><name>GetDefaultZoomLevel</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><name>content</name><operator>::</operator><name>HostZoomMap</name><operator>::</operator><call><name>GetForWebContents</name><argument_list>(<argument><expr><call><name>web_contents</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>-&gt;</operator><call><name>GetDefaultZoomLevel</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

 <label><name>protected</name>:</label>
  <comment type="line">// content::WebContentsObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>DidFinishNavigation</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>NavigationHandle</name><operator>*</operator> <name>handle</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>WebContentsDestroyed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderFrameHostChanged</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>old_host</name></expr></argument>,
                              <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>new_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>friend</name> <name>class</name> <name>content</name><operator>::</operator><name><name>WebContentsUserData</name><argument_list type="generic">&lt;<argument><expr><name>WebContentsZoomController</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>

  <comment type="line">// Called after a navigation has committed to set default zoom factor.</comment>
  <function_decl><type><name>void</name></type> <name>SetZoomFactorOnNavigationIfNeeded</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GURL</name><modifier>&amp;</modifier></type> <name>url</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// The current zoom mode.</comment>
  <decl_stmt><decl><type><name>ZoomMode</name></type> <name>zoom_mode_</name> <init>= <expr><name>ZoomMode</name><operator>::</operator><name>DEFAULT</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Current zoom level.</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>zoom_level_</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// kZoomFactor.</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>default_zoom_factor_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>kPageZoomEpsilon</name> <init>= <expr><literal type="number">0.001</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>old_process_id_</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>old_view_id_</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>WebContentsZoomController</name><modifier>*</modifier></type> <name>embedder_zoom_controller_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>ObserverList</name><argument_list type="generic">&lt;<argument><expr><name>Observer</name></expr></argument>&gt;</argument_list></name> <name>observers_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>content</name><operator>::</operator><name>HostZoomMap</name><operator>*</operator> <name>host_zoom_map_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>WEB_CONTENTS_USER_DATA_KEY_DECL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>WebContentsZoomController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_WEB_CONTENTS_ZOOM_CONTROLLER_H_</comment>
</unit>
