<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/lib/bluetooth_chooser.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_LIB_BLUETOOTH_CHOOSER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_LIB_BLUETOOTH_CHOOSER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/bluetooth_chooser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/api/atom_api_web_contents.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BluetoothChooser</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>BluetoothChooser</name> <block>{
 <expr><name>public</name><operator>:</operator>
  struct <name>DeviceInfo</name> <block>{
    <expr><name>std</name><operator>::</operator><name>string</name> <name>device_id</name></expr>;
    <expr><name>base</name><operator>::</operator><name>string16</name> <name>device_name</name></expr>;
  }</block></expr>;

  <expr><name>explicit</name> <call><name>BluetoothChooser</name><argument_list>(<argument><expr><name>api</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>contents</name></expr></argument>,
                            <argument><expr><specifier>const</specifier> <name>EventHandler</name><operator>&amp;</operator> <name>handler</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>BluetoothChooser</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// content::BluetoothChooser:</comment>
  <expr><name>void</name> <macro><name>SetAdapterPresence</name><argument_list>(<argument>AdapterPresence presence</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>ShowDiscoveryState</name><argument_list>(<argument>DiscoveryState state</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddOrUpdateDevice</name><argument_list>(<argument>const std::string&amp; device_id</argument>,
                         <argument>bool should_update_name</argument>,
                         <argument>const base::string16&amp; device_name</argument>,
                         <argument>bool is_gatt_connected</argument>,
                         <argument>bool is_paired</argument>,
                         <argument>int signal_strength_level</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DeviceInfo</name></expr></argument>&gt;</argument_list></name> <call><name>GetDeviceList</name><argument_list>()</argument_list></call></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name> <name>device_map_</name></expr>;
  <expr><name>api</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>api_web_contents_</name></expr>;
  <expr><name>EventHandler</name> <name>event_handler_</name></expr>;
  <expr><name>int</name> <name>num_retries_</name> <operator>=</operator> <literal type="number">0</literal></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>BluetoothChooser</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_LIB_BLUETOOTH_CHOOSER_H_</comment>
</unit>
