<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/renderer/guest_view_container.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_RENDERER_GUEST_VIEW_CONTAINER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RENDERER_GUEST_VIEW_CONTAINER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/renderer/browser_plugin_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/renderer/render_frame.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gfx</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Size</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>GuestViewContainer</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>BrowserPluginDelegate</name> <block>{
 <expr><name>public</name><operator>:</operator></expr>
  <typedef>typedef <expr_stmt><expr><name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>ResizeCallback</name></expr>;</expr_stmt></typedef>

  <name>explicit</name> <call><name>GuestViewContainer</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>)</argument_list></call></block></expr></range></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>GuestViewContainer</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <function_decl><type><specifier>static</specifier> <name>GuestViewContainer</name><modifier>*</modifier></type> <name>FromID</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>element_instance_id</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>RegisterElementResizeCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ResizeCallback</name><modifier>&amp;</modifier></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// content::BrowserPluginDelegate:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>SetElementInstanceID</name><argument_list>(<argument><expr><name>int</name> <name>element_instance_id</name></expr></argument>)</argument_list> <name>final</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidResizeElement</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>new_size</name></expr></argument>)</argument_list> <name>final</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>BrowserPluginDelegate</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWeakPtr</name><argument_list>()</argument_list></macro> <name>final</name></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>int</name></type> <name>element_instance_id_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>ResizeCallback</name></type> <name>element_resize_callback_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>GuestViewContainer</name></expr></argument>&gt;</argument_list></name> <name>weak_ptr_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>GuestViewContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_RENDERER_GUEST_VIEW_CONTAINER_H_</comment>
</unit>
