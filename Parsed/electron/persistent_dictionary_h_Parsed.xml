<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/persistent_dictionary.h"><comment type="line">// Copyright 2014 Cheng Zhao. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by MIT license that can be found in the</comment>
<comment type="line">// LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_PERSISTENT_DICTIONARY_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_PERSISTENT_DICTIONARY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/dictionary.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<comment type="line">// Like Dictionary, but stores object in persistent handle so you can keep it</comment>
<comment type="line">// safely on heap.</comment>
<comment type="line">//</comment>
<comment type="line">// TODO(zcbenz): The only user of this class is AtomTouchBar, we should migrate</comment>
<comment type="line">// away from this class.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>PersistentDictionary</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>PersistentDictionary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PersistentDictionary</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PersistentDictionary</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PersistentDictionary</name><operator>&amp;</operator> <name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>PersistentDictionary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PersistentDictionary</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>PersistentDictionary</name><operator>&amp;</operator> <name>other</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <macro><name>GetHandle</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>, <argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name></type> <name>Get</name><argument_list>(<argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>V</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list> const <block>{<block_content>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name> <operator>=</operator> <call><name><name>isolate_</name><operator>-&gt;</operator><name>GetCurrentContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>v8_key</name> <operator>=</operator> <name>gin</name><operator>::</operator><call><name>ConvertToV8</name><argument_list>(<argument><expr><name>isolate_</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Maybe</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator> <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Has</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>v8_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>IsJust</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>FromJust</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Get</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>v8_key</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToLocal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>gin</name><operator>::</operator><call><name>ConvertFromV8</name><argument_list>(<argument><expr><name>isolate_</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>handle_</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin_helper</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>gin_helper</name><operator>::</operator><name>PersistentDictionary</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                     <argument>v8::Local&lt;v8::Value&gt; val</argument>,
                     <argument>gin_helper::PersistentDictionary* out</argument>)</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>val</name><operator>-&gt;</operator><name>IsObject</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <operator>*</operator><name>out</name> <operator>=</operator> <name>gin_helper</name><operator>::</operator><call><name>PersistentDictionary</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>,
                                            <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Cast</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
    <return>return <expr><name>true</name></expr>;</return>
  }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}  <comment type="line">// namespace gin</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_PERSISTENT_DICTIONARY_H_</comment>
</unit>
