<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/node_includes.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_NODE_INCLUDES_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_NODE_INCLUDES_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/logging.h"</cpp:file></cpp:include>

<comment type="line">// Include common headers for using node APIs.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NODE_SHARED_MODE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDING_NODE_EXTENSION</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// The following define makes sure that we do not include the macros</comment>
<comment type="line">// again. But we still need the tracing functions, so declaring them.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_TRACING_TRACE_EVENT_H_</name></cpp:macro></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"ASSERT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"CHECK"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"CHECK_EQ"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"CHECK_GE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"CHECK_GT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"CHECK_LE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"CHECK_LT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"CHECK_NE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"DCHECK"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"DCHECK_EQ"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"DCHECK_GE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"DCHECK_GT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"DCHECK_LE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"DCHECK_LT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"DCHECK_NE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"DISALLOW_COPY_AND_ASSIGN"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"LIKELY"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"NO_RETURN"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"UNLIKELY"</cpp:literal><name>)</name></cpp:pragma>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ASSERT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_EQ</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_GE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_GT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_LE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_LT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_NE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DCHECK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DCHECK_EQ</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DCHECK_GE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DCHECK_GT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DCHECK_LE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DCHECK_LT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DCHECK_NE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DISALLOW_COPY_AND_ASSIGN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LIKELY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NO_RETURN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UNLIKELY</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>debug_string</name></cpp:undef>    <comment type="line">// This is defined in macOS SDK in AssertMacros.h.</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>require_string</name></cpp:undef>  <comment type="line">// This is defined in macOS SDK in AssertMacros.h.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"env-inl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"env.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node_buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node_internals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node_options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node_platform.h"</cpp:file></cpp:include>

<comment type="line">// Alternative to NODE_MODULE_CONTEXT_AWARE_X.</comment>
<comment type="line">// Allows to explicitly register builtin modules instead of using</comment>
<comment type="line">// __attribute__((constructor)).</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_LINKED_MODULE_CONTEXT_AWARE</name><parameter_list>(<parameter><type><name>modname</name></type></parameter>, <parameter><type><name>regfunc</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>NODE_MODULE_CONTEXT_AWARE_CPP(modname, regfunc, nullptr, NM_F_LINKED)</cpp:value></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"ASSERT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"CHECK"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"CHECK_EQ"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"CHECK_GE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"CHECK_GT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"CHECK_LE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"CHECK_LT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"CHECK_NE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"DCHECK"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"DCHECK_EQ"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"DCHECK_GE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"DCHECK_GT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"DCHECK_LE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"DCHECK_LT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"DCHECK_NE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"DISALLOW_COPY_AND_ASSIGN"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"LIKELY"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"NO_RETURN"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"UNLIKELY"</cpp:literal><name>)</name></cpp:pragma>

<decl_stmt><decl><type><name>namespace</name></type> <name>node</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tracing</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>TraceEventHelper</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name>TracingController</name><operator>*</operator> <call><name>GetTracingController</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>static</specifier> <name>node</name><operator>::</operator><name>tracing</name><operator>::</operator><name>Agent</name><operator>*</operator> <call><name>GetAgent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>SetAgent</name><argument_list>(<argument><expr><name>node</name><operator>::</operator><name>tracing</name><operator>::</operator><name>Agent</name><operator>*</operator> <name>agent</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace tracing</comment>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace node</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_NODE_INCLUDES_H_</comment>
</unit>
