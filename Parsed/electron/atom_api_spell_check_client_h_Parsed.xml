<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/renderer/api/atom_api_spell_check_client.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_RENDERER_API_ATOM_API_SPELL_CHECK_CLIENT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RENDERER_API_ATOM_API_SPELL_CHECK_CLIENT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/spellcheck/renderer/spellcheck_worditerator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/platform/web_spell_check_panel_host_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/platform/web_vector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/web/web_text_check_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v8/include/v8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>blink</name> <block>{<block_content>
<struct_decl>struct <name>WebTextCheckingResult</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>WebTextCheckingCompletion</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace blink</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SpellCheckClient</name> <range>: <expr><name>public</name> <name>blink</name><operator>::</operator><name>WebSpellCheckPanelHostClient</name></expr></range></decl>,
                         <decl><type ref="prev"/><name>public</name> <name>blink</name>::<name>WebTextCheckClient</name></decl>,
                         <decl><type ref="prev"/><name>public</name> <name>base</name>::<name><name>SupportsWeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>SpellCheckClient</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>SpellCheckClient</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>language</name></expr></argument>,
                   <argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                   <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>SpellCheckClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>class</name></type> <name>SpellcheckRequest</name></decl>;</decl_stmt>
  <comment type="line">// blink::WebTextCheckClient:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>RequestCheckingOfText</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebString</name><operator>&amp;</operator> <name>textToCheck</name></expr></argument>,
                             <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>blink</name><operator>::</operator><name>WebTextCheckingCompletion</name></expr></argument>&gt;</argument_list></name>
                                 <name>completionCallback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsSpellCheckingEnabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// blink::WebSpellCheckPanelHostClient:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>ShowSpellingUI</name><argument_list>(<argument><expr><name>bool</name> <name>show</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsShowingSpellingUI</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>UpdateSpellingUIWithMisspelledWord</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebString</name><operator>&amp;</operator> <name>word</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <struct>struct <name>SpellCheckScope</name> <block>{
    <expr_stmt><expr><name>v8</name><operator>::</operator><name>HandleScope</name> <name>handle_scope_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name>Context</name><operator>::</operator><name>Scope</name> <name>context_scope_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>provider_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Function</name></expr></argument>&gt;</argument_list></name> <name>spell_check_</name></expr>;</expr_stmt>

    <function_decl><type><name>explicit</name></type> <name>SpellCheckScope</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SpellCheckClient</name><modifier>&amp;</modifier></type> <name>client</name></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><operator>~</operator><call><name>SpellCheckScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block>;</struct>

  <comment type="line">// Run through the word iterator and send out requests</comment>
  <comment type="line">// to the JS API for checking spellings of words in the current</comment>
  <comment type="line">// request.</comment>
  <function_decl><type><name>void</name></type> <name>SpellCheckText</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Call JavaScript to check spelling a word.</comment>
  <comment type="line">// The javascript function will callback OnSpellCheckDone</comment>
  <comment type="line">// with the results of all the misspelled words.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>SpellCheckWords</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SpellCheckScope</name><operator>&amp;</operator> <name>scope</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>words</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Returns whether or not the given word is a contraction of valid words</comment>
  <comment type="line">// (e.g. "word:word").</comment>
  <comment type="line">// Output variable contraction_words will contain individual</comment>
  <comment type="line">// words in the contraction.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsContraction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SpellCheckScope</name><operator>&amp;</operator> <name>scope</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>word</name></expr></argument>,
                     <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>contraction_words</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Callback for the JS API which returns the list of misspelled words.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnSpellCheckDone</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>misspelled_words</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Represents character attributes used for filtering out characters which</comment>
  <comment type="line">// are not supported by this SpellCheck object.</comment>
  <decl_stmt><decl><type><name>SpellcheckCharAttribute</name></type> <name>character_attributes_</name></decl>;</decl_stmt>

  <comment type="line">// Represents word iterators used in this spellchecker. The |text_iterator_|</comment>
  <comment type="line">// splits text provided by WebKit into words, contractions, or concatenated</comment>
  <comment type="line">// words. The |contraction_iterator_| splits a concatenated word extracted by</comment>
  <comment type="line">// |text_iterator_| into word components so we can treat a concatenated word</comment>
  <comment type="line">// consisting only of correct words as a correct word.</comment>
  <decl_stmt><decl><type><name>SpellcheckWordIterator</name></type> <name>text_iterator_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SpellcheckWordIterator</name></type> <name>contraction_iterator_</name></decl>;</decl_stmt>

  <comment type="line">// The parameters of a pending background-spellchecking request.</comment>
  <comment type="line">// (When WebKit sends two or more requests, we cancel the previous</comment>
  <comment type="line">// requests so we do not have to use vectors.)</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SpellcheckRequest</name></expr></argument>&gt;</argument_list></name> <name>pending_request_param_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>provider_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Function</name></expr></argument>&gt;</argument_list></name> <name>spell_check_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>SpellCheckClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_RENDERER_API_ATOM_API_SPELL_CHECK_CLIENT_H_</comment>
</unit>
