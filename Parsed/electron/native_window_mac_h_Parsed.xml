<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/native_window_mac.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NATIVE_WINDOW_MAC_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NATIVE_WINDOW_MAC_H_</name></cpp:macro></cpp:define>

<cpp:empty>#import &lt;Cocoa/Cocoa.h&gt;</cpp:empty>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/mac/scoped_nsobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/native_window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/controls/native/native_view_host.h"</cpp:file></cpp:include>

@<decl_stmt><decl><type><name>class</name></type> <name>AtomNSWindow</name></decl>;</decl_stmt>
@<decl_stmt><decl><type><name>class</name></type> <name>AtomNSWindowDelegate</name></decl>;</decl_stmt>
@<decl_stmt><decl><type><name>class</name></type> <name>AtomPreviewItem</name></decl>;</decl_stmt>
@<decl_stmt><decl><type><name>class</name></type> <name>AtomTouchBar</name></decl>;</decl_stmt>
@<decl_stmt><decl><type><name>class</name></type> <name>CustomWindowButtonView</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>RootViewMac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>NativeWindowMac</name> <range>: <expr><name>public</name> <name>NativeWindow</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>NativeWindowMac</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>, <argument><expr><name>NativeWindow</name><operator>*</operator> <name>parent</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>NativeWindowMac</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// NativeWindow:</comment>
  <expr><name>void</name> <macro><name>SetContentView</name><argument_list>(<argument>views::View* view</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Close</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>CloseImmediately</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Focus</name><argument_list>(<argument>bool focus</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsFocused</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Show</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>ShowInactive</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Hide</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsVisible</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsEnabled</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetEnabled</name><argument_list>(<argument>bool enable</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Maximize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Unmaximize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsMaximized</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Minimize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Restore</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsMinimized</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetFullScreen</name><argument_list>(<argument>bool fullscreen</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsFullscreen</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetBounds</name><argument_list>(<argument>const gfx::Rect&amp; bounds</argument>, <argument>bool animate = false</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetBounds</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsNormal</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetNormalBounds</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetContentSizeConstraints</name><argument_list>(
      <argument>const extensions::SizeConstraints&amp; size_constraints</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetResizable</name><argument_list>(<argument>bool resizable</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>MoveAbove</name><argument_list>(<argument>const std::string&amp; sourceId</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>MoveTop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsResizable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetMovable</name><argument_list>(<argument>bool movable</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetAspectRatio</name><argument_list>(<argument>double aspect_ratio</argument>,
                      <argument>const gfx::Size&amp; extra_size</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PreviewFile</name><argument_list>(<argument>const std::string&amp; path</argument>,
                   <argument>const std::string&amp; display_name</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>CloseFilePreview</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsMovable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetMinimizable</name><argument_list>(<argument>bool minimizable</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsMinimizable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetMaximizable</name><argument_list>(<argument>bool maximizable</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsMaximizable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetFullScreenable</name><argument_list>(<argument>bool fullscreenable</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsFullScreenable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetClosable</name><argument_list>(<argument>bool closable</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsClosable</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetAlwaysOnTop</name><argument_list>(<argument>ui::ZOrderLevel z_order</argument>,
                      <argument>const std::string&amp; level</argument>,
                      <argument>int relativeLevel</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>ui</name><operator>::</operator><name>ZOrderLevel</name> <macro><name>GetZOrderLevel</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Center</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Invalidate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetTitle</name><argument_list>(<argument>const std::string&amp; title</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetTitle</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>FlashFrame</name><argument_list>(<argument>bool flash</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetSkipTaskbar</name><argument_list>(<argument>bool skip</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetExcludedFromShownWindowsMenu</name><argument_list>(<argument>bool excluded</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsExcludedFromShownWindowsMenu</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetSimpleFullScreen</name><argument_list>(<argument>bool simple_fullscreen</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsSimpleFullScreen</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetKiosk</name><argument_list>(<argument>bool kiosk</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsKiosk</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetBackgroundColor</name><argument_list>(<argument>SkColor color</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetHasShadow</name><argument_list>(<argument>bool has_shadow</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>HasShadow</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetOpacity</name><argument_list>(<argument>const double opacity</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>double</name> <macro><name>GetOpacity</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetRepresentedFilename</name><argument_list>(<argument>const std::string&amp; filename</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetRepresentedFilename</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetDocumentEdited</name><argument_list>(<argument>bool edited</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsDocumentEdited</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetIgnoreMouseEvents</name><argument_list>(<argument>bool ignore</argument>, <argument>bool forward</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetContentProtection</name><argument_list>(<argument>bool enable</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetFocusable</name><argument_list>(<argument>bool focusable</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddBrowserView</name><argument_list>(<argument>NativeBrowserView* browser_view</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RemoveBrowserView</name><argument_list>(<argument>NativeBrowserView* browser_view</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetParentWindow</name><argument_list>(<argument>NativeWindow* parent</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>content</name><operator>::</operator><name>DesktopMediaID</name> <macro><name>GetDesktopMediaID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>NativeView</name> <macro><name>GetNativeView</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>NativeWindow</name> <macro><name>GetNativeWindow</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>AcceleratedWidget</name> <macro><name>GetAcceleratedWidget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>NativeWindowHandle</name> <macro><name>GetNativeWindowHandle</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetProgressBar</name><argument_list>(<argument>double progress</argument>, <argument>const ProgressState state</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetOverlayIcon</name><argument_list>(<argument>const gfx::Image&amp; overlay</argument>,
                      <argument>const std::string&amp; description</argument>)</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>SetVisibleOnAllWorkspaces</name><argument_list>(<argument>bool visible</argument>,
                                 <argument>bool visibleOnFullScreen</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsVisibleOnAllWorkspaces</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>SetAutoHideCursor</name><argument_list>(<argument>bool auto_hide</argument>)</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>SelectPreviousTab</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SelectNextTab</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>MergeAllWindows</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>MoveTabToNewWindow</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>ToggleTabBar</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>AddTabbedWindow</name><argument_list>(<argument>NativeWindow* window</argument>)</argument_list></macro> <name>override</name></expr>;

  <expr><name>bool</name> <macro><name>SetWindowButtonVisibility</name><argument_list>(<argument>bool visible</argument>)</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>SetVibrancy</name><argument_list>(<argument>const std::string&amp; type</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetTouchBar</name><argument_list>(
      <argument>std::vector&lt;gin_helper::PersistentDictionary&gt; items</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RefreshTouchBarItem</name><argument_list>(<argument>const std::string&amp; item_id</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetEscapeTouchBarItem</name><argument_list>(<argument>gin_helper::PersistentDictionary item</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetGTKDarkThemeEnabled</name><argument_list>(<argument>bool use_dark_theme</argument>)</argument_list></macro> <name>override</name> <block>{}</block>

  <name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>ContentBoundsToWindowBounds</name><argument_list>(<argument>const gfx::Rect&amp; bounds</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>WindowBoundsToContentBounds</name><argument_list>(<argument>const gfx::Rect&amp; bounds</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

  <comment type="line">// Use a custom content view instead of Chromium's BridgedContentView.</comment>
  <expr><name>void</name> <call><name>OverrideNSWindowContentView</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Set the attribute of NSWindow while work around a bug of zoom button.</comment>
  <expr><name>void</name> <macro><name>SetStyleMask</name><argument_list>(<argument>bool on</argument>, <argument>NSUInteger flag</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetCollectionBehavior</name><argument_list>(<argument>bool on</argument>, <argument>NSUInteger flag</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetWindowLevel</name><argument_list>(<argument>int level</argument>)</argument_list></macro></expr>;

  enum <expr><name>class</name> <name>TitleBarStyle</name> <block>{
    <expr><name>NORMAL</name></expr>,
    <expr><name>HIDDEN</name></expr>,
    <expr><name>HIDDEN_INSET</name></expr>,
    <expr><name>CUSTOM_BUTTONS_ON_HOVER</name></expr>,
  }</block></expr>;
  <expr><name>TitleBarStyle</name> <macro><name>title_bar_style</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>title_bar_style_</name></expr>;</return> }</block>

  <name>AtomPreviewItem</name><operator>*</operator> <macro><name>preview_item</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>preview_item_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
  <name>AtomTouchBar</name><operator>*</operator> <macro><name>touch_bar</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>touch_bar_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
  <name>bool</name> <macro><name>zoom_to_page_width</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>zoom_to_page_width_</name></expr>;</return> }</block>
  <name>bool</name> <macro><name>fullscreen_window_title</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fullscreen_window_title_</name></expr>;</return> }</block>
  <name>bool</name> <macro><name>always_simple_fullscreen</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>always_simple_fullscreen_</name></expr>;</return> }</block>

 <name>protected</name><operator>:</operator>
  <comment type="line">// views::WidgetDelegate:</comment>
  <name>bool</name> <macro><name>CanResize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <macro><name>GetContentsView</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <comment type="line">// Add custom layers to the content view.</comment>
  <name>void</name> <macro><name>AddContentViewLayers</name><argument_list>(<argument>bool minimizable</argument>, <argument>bool closable</argument>)</argument_list></macro></expr>;

  <expr><name>void</name> <macro><name>InternalSetParentWindow</name><argument_list>(<argument>NativeWindow* parent</argument>, <argument>bool attach</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetForwardMouseMessages</name><argument_list>(<argument>bool forward</argument>)</argument_list></macro></expr>;

  <expr><name>AtomNSWindow</name><operator>*</operator> <name>window_</name></expr>;  <comment type="line">// Weak ref, managed by widget_.</comment>

  <expr><name>base</name><operator>::</operator><name><name>scoped_nsobject</name><argument_list type="generic">&lt;<argument><expr><name>AtomNSWindowDelegate</name></expr></argument>&gt;</argument_list></name> <name>window_delegate_</name></expr>;
  <expr><name>base</name><operator>::</operator><name><name>scoped_nsobject</name><argument_list type="generic">&lt;<argument><expr><name>AtomPreviewItem</name></expr></argument>&gt;</argument_list></name> <name>preview_item_</name></expr>;
  <expr><name>base</name><operator>::</operator><name><name>scoped_nsobject</name><argument_list type="generic">&lt;<argument><expr><name>AtomTouchBar</name></expr></argument>&gt;</argument_list></name> <name>touch_bar_</name></expr>;
  <expr><name>base</name><operator>::</operator><name><name>scoped_nsobject</name><argument_list type="generic">&lt;<argument><expr><name>CustomWindowButtonView</name></expr></argument>&gt;</argument_list></name> <name>buttons_view_</name></expr>;

  <comment type="line">// Event monitor for scroll wheel event.</comment>
  <expr><name>id</name> <name>wheel_event_monitor_</name></expr>;

  <comment type="line">// The NSView that used as contentView of window.</comment>
  <comment type="line">//</comment>
  <comment type="line">// For frameless window it would fill the whole window.</comment>
  <expr><name>base</name><operator>::</operator><name><name>scoped_nsobject</name><argument_list type="generic">&lt;<argument><expr><name>NSView</name></expr></argument>&gt;</argument_list></name> <name>container_view_</name></expr>;

  <comment type="line">// The views::View that fills the client area.</comment>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RootViewMac</name></expr></argument>&gt;</argument_list></name> <name>root_view_</name></expr>;

  <expr><name>bool</name> <name>is_kiosk_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>was_fullscreen_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>zoom_to_page_width_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>fullscreen_window_title_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>resizable_</name> <operator>=</operator> <name>true</name></expr>;

  <expr><name>NSInteger</name> <name>attention_request_id_</name> <operator>=</operator> <literal type="number">0</literal></expr>;  <comment type="line">// identifier from requestUserAttention</comment>

  <comment type="line">// The presentation options before entering kiosk mode.</comment>
  <expr><name>NSApplicationPresentationOptions</name> <name>kiosk_options_</name></expr>;

  <comment type="line">// The "titleBarStyle" option.</comment>
  <expr><name>TitleBarStyle</name> <name>title_bar_style_</name> <operator>=</operator> <name>TitleBarStyle</name><operator>::</operator><name>NORMAL</name></expr>;

  <comment type="line">// The visibility mode of window button controls when explicitly set through</comment>
  <comment type="line">// setWindowButtonVisibility().</comment>
  <expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>window_button_visibility_</name></expr>;

  <comment type="line">// Simple (pre-Lion) Fullscreen Settings</comment>
  <expr><name>bool</name> <name>always_simple_fullscreen_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>is_simple_fullscreen_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>was_maximizable_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>was_movable_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>NSRect</name> <name>original_frame_</name></expr>;
  <expr><name>NSInteger</name> <name>original_level_</name></expr>;
  <expr><name>NSUInteger</name> <name>simple_fullscreen_mask_</name></expr>;

  <expr><name>base</name><operator>::</operator><name><name>scoped_nsobject</name><argument_list type="generic">&lt;<argument><expr><name>NSColor</name></expr></argument>&gt;</argument_list></name> <name>background_color_before_vibrancy_</name></expr>;
  <expr><name>bool</name> <name>transparency_before_vibrancy_</name> <operator>=</operator> <name>false</name></expr>;

  <comment type="line">// The presentation options before entering simple fullscreen mode.</comment>
  <expr><name>NSApplicationPresentationOptions</name> <name>simple_fullscreen_options_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NativeWindowMac</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NATIVE_WINDOW_MAC_H_</comment>
</unit>
