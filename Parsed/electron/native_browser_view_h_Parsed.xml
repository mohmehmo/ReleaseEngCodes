<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/native_browser_view.h"><comment type="line">// Copyright (c) 2017 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NATIVE_BROWSER_VIEW_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NATIVE_BROWSER_VIEW_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/skia/include/core/SkColor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gfx</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Rect</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<enum>enum <name>AutoResizeFlags</name> <block>{
  <decl><name>kAutoResizeWidth</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
  <decl><name>kAutoResizeHeight</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
  <decl><name>kAutoResizeHorizontal</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
  <decl><name>kAutoResizeVertical</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContentsView</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>NativeBrowserView</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>NativeBrowserView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><specifier>static</specifier> <name>NativeBrowserView</name><modifier>*</modifier></type> <name>Create</name><parameter_list>(
      <parameter><decl><type><name>InspectableWebContents</name><modifier>*</modifier></type> <name>inspectable_web_contents</name></decl></parameter>)</parameter_list>;</function_decl>

  <function><type><name>InspectableWebContents</name><modifier>*</modifier></type> <name>GetInspectableWebContents</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>inspectable_web_contents_</name></expr>;</return>
  </block_content>}</block></function>

  <function_decl><type><name>InspectableWebContentsView</name><modifier>*</modifier></type> <name>GetInspectableWebContentsView</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <call><name>GetWebContents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetAutoResizeFlags</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>bounds</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Rect</name> <call><name>GetBounds</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetBackgroundColor</name><parameter_list>(<parameter><decl><type><name>SkColor</name></type> <name>color</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Called when the window needs to update its draggable region.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>UpdateDraggableRegions</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>gfx</name><operator>::</operator><name>Rect</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>system_drag_exclude_areas</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

 <label><name>protected</name>:</label>
  <function_decl><type><name>explicit</name></type> <name>NativeBrowserView</name><parameter_list>(<parameter><decl><type><name>InspectableWebContents</name><modifier>*</modifier></type> <name>inspectable_web_contents</name></decl></parameter>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>InspectableWebContents</name><modifier>*</modifier></type> <name>inspectable_web_contents_</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NativeBrowserView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NATIVE_BROWSER_VIEW_H_</comment>
</unit>
