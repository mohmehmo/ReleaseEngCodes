"Check class contain unflattened flattenables and set default value to them

1. Define a new class flag J9ClassContainsUnflattenedFlattenables
   and set when a class contains unflattened flattenables.
2. When creating an object, check if the resolved class contains
   unflattened flattenables. If it does, default value of the unflattened
   field's class from FCC are stored into the unflattened field of the
   object being created.
3. Tests are created to check if all flattenable fields are initialized
   when created.

Signed-off-by: thomasli <Xinhai.Li@ibm.com>"
"Prepare JEP331 with an empty implementation

Updated jvmti.h with JVMTI 11 version, new event and method defines;
Added a sanity test;
Changed JVMTI_VERSION_9_0 to JVMTI_VERSION_9 to match RI;
Removed unused J9JVMTIEnv.capabilitiesMask and related code.

Signed-off-by: Jason Feng <fengj@ca.ibm.com>"
"Add support for flattened arrays

This PR add support for reading and writing to flattened arrays
(aaload and aastore). It also adds a new method to the barrier
APIs to retrieve the offset of a flattened array element.

Related https://github.com/eclipse/openj9/issues/5021

Based on Aidan Ha's work

Signed-off-by: tajila <atobia@ca.ibm.com>"
"JEP 359 attribute & isRecord support

Signed-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"
"Add tests for -XX:[+|-]ClassRelationshipVerifier

Test the following cases:
- only source class loaded
- only target class loaded
- neither target nor source classes loaded
- source is subclass of target
- source implements target
- source is not subclass of target
- source does not implement target

For tests where classes are not already loaded, query the
classRelationships hash table in the class loader to check that a
source/child and target/parent relationship has been recorded.

TestClassRelationshipVerifier is excluded from testvmcheck since
it is incompatible with that test and does not benefit from being
tested with `-Xverify:all` or `-Xcheck:vm`.

Signed-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"
"Implement New Lock Reservation scheme on Power

This commit is for a new lock resevation scheme that is currently only
active on power.

The new lock reservation scheme adds a new Learning phase before a lock is
reserved. During the Learning phase a lock reservation cancellation is not
required if a second thread wishes to lock an object. If the Learning
phase is successful, the object can be reserved.

If two threads attempt to lock the same object, then it can never be
reserved again. Under the old system, lock reservation could be attempted
again on the same object even after a reservation on the object was
cancelled.

A system to bypass the new Learning state is added via new initial
lockwords. Data is collected on a per class basis to try and predict
if locked objects of that class will eventually go to Flat or Reserved.
Based on that data, objects might go straight to Flat or Reserved when
they are locked for the first time.

To activate the new lock reservation scheme use the
-XX:+GlobalLockReservation command line option. Without the option, the
lock reservation system used will be very similar to the original system.

Minor changes to x86 codegen were made to accomodate the lockword format
change required to implement the new lock reservation scheme.

This commit also removes much of the unused PPC Monitor Snippet code.

More details can be found in the documentation at:
doc/compiler/ObjectLockword.md

Issue: #8045
Signed-off-by: jimmyk <jimmyk@ca.ibm.com>"
"Add sun_reflect_ConstantPool native for constantDynamic resolve

- add jcl exports for getCPConstantDynamicAt

Signed-off-by: Jack Lu <Jack.S.Lu@ibm.com>"
"Add VM support for multi-layer shared class cache.

1. Replace SRPs with J9ShrOffset in meta data
2. Change cacheMap::startup() to work on multi-layer cache.
3. Change DDR shrc commands to work with J9ShrOffset
4. Update tests

issue #5480

Signed-off-by: Hang Shao <hangshao@ca.ibm.com>"
"Runtime compressed refs work

[ci skip]

Signed-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"
"Add valueType checks to monitor enter

The change updates the non-blocking monitor enter code to detect
valuetype receivers and return an appropriate error code. This means
that the `1 == rc` check that is currently being done will not work as
there is now more than one error code in the non-blocking enter case.

Instead the following check must be done:
`(monstatus < J9_OBJECT_MONITOR_BLOCKING)`

More error codes may be added in the future.

It is not necessarry to modify the monitorExit code in the case of
valuetypes because the monitorExit code will throw IMSE if the receiver
is not locked. So it is only necesarry to disallow valueType receiver
from being locked in the first place.

Signed-off-by: Tobi Ajila <atobia@ca.ibm.com>"
"Spelling

* know
* knowledge
* label
* label
* large
* launch
* least
* length
* libraries
* library
* linkage
* linux
* loadaddress
* loaded
* location
* lookup
* lpnguyen
* macro
* maintenance
* manageable
* manager
* matches
* matching
* matter
* meaningful
* measured
* mechanism
* members
* memory
* mergeable
* message
* metadata
* method
* millis
* millisecond
* milliseconds
* minimum
* missing
* modification
* modifying
* monitor
* mprotected
* mshmask
* multi
* multiple
* mutexes
* narrowing
* native
* necessary
* need
* negligible
* nonexistent
* notification
* number
* numbers differ
* numeric

Signed-off-by: Josh Soref <jsoref@gmail.com>"
"Spelling

* temporary
* terminate
* terminated
* test
* that
* the tree
* therefore
* they
* this
* those
* thread
* threads at
* threshold
* throttle
* throttling
* through
* tidiness
* timestamp
* total
* tracegen
* tracepoints
* trailer
* trampoline
* trampolines
* transfer
* transform
* transformations
* transient
* transition
* triggered
* truncation
* trust
* type
* uncommitted
* unimplemented
* unnecessary
* unrecognized
* unresolve
* unsetting
* untested
* unused
* using
* usually
* valid
* varargs
* variable
* verbose
* verification
* verified
* version
* virtual
* virtualization
* visibility
* visible
* visited
* volatile
* weight
* wherever
* whether
* which
* within
* with
* wrapper
* write

Signed-off-by: Josh Soref <jsoref@gmail.com>"
"Update copyright to 2019

Signed-off-by: Josh Soref <jsoref@gmail.com>"
"Spelling f..h

* facilitate
* failed
* failure
* false
* family
* finalize
* finalized
* finish
* finished
* flags
* flattened
* floatsanity
* following
* fontmanager
* force
* format
* formatter
* formula
* forward
* forwarded
* framework
* frameworks
* frequencies
* frequency
* frequent
* function
* functionality
* further
* future
* garbage
* generate
* generating
* generational
* gigabytes
* given
* globally
* grandparent
* graphs
* guarantee
* guaranteed
* guaranteeing
* guarantees
* guard
* handle, method
* handle
* handler, stream
* happen
* happened
* harmony
* hash
* have
* helper
* hence
* heuristics
* hierarchical
* hierarchy
* high
* hindrance
* hold
* hook
* housekeeping
* however
* hysterisis

Signed-off-by: Josh Soref <jsoref@gmail.com>"
"Spelling

* object
* observed
* occasionally
* occurred
* occurrence
* occurs
* official
* offset
* offsets
* omission
* omit
* opening
* operand
* operation
* opportunities
* optavgpause
* optimization
* optimized
* optimizing
* option
* original
* otherwise
* outer
* output
* outputting
* overflow
* overridable
* overridden
* override
* overwrite
* overwriting
* owned
* package
* packed
* parallel
* parallelism
* param
* parameter
* parameters
* parent
* partial
* partially
* patching
* path
* paths
* pause
* peeking
* perform
* performance
* persist
* persistent
* pertaining
* pertains
* pointer
* popping
* possession
* possibility
* potential
* potentially
* precede
* preceded
* precedence
* preceding
* predecessors
* preempt
* preprocess
* preprologue
* prerequisite
* preserving
* previous
* previously
* primitive
* primitives
* priority
* probability
* problem
* process
* processing
* processor
* profiling
* program
* programmatically
* progress
* project
* prologue
* propagate
* propagating
* properties
* protected
* purpose

Signed-off-by: Josh Soref <jsoref@gmail.com>"
"Lock nursery is no longer optional

J9VM_THR_LOCK_NURSERY is defined in every build.
J9VM_THR_LOCK_NURSERY_FAT_ARRAYS is undefined in every build.

Remove ifdefs and dead code appropriately.

[ci skip]

Signed-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"
"Remove count field in String and use coder for compression

This change removes the count field from the String class in Java 9
onward. The String class in Java 8 is left unmodified. The count
field represents the length of the string in the underlying array.
Instead of using a separate field to represent the length we size the
underlying array to be the same length as the string.

By doing this we no longer have the ability to share the underlying
array with StringBuffer / StringBuilder objects (unless they are of
the correct size). Performance measurements have indicated this is a
worth while trade off.

Moreover, the elimination of the count field with it eliminates our
ability to use the sign bit of the count field to represent String
compression. As we still need to do this moving forward, and given
that Java 9 introduces a coder field we simply adopt to start using
this coder field to represent String compression instead.

To get to a performant state however our StringBuffer / StringBuilder
implementations also need to change. By introducing the coder field
we are more easily able to adapt to using OpenJDK's version of these
classes. This change also adopts the use of OpenJDK's StringBuffer /
StringBuilder for performance in Java 9 onward.

There were several steps made to make this change work. The original
commits were squashed ahead of time as development went on to ease the
pain of rebasing upstream changes to the files modified. The changes
made are outlined as follows:

- Separate String, StringBuffer, and StringBuilder preprocessor paths

Separate class definitions into contiguous chunks rather than
interleaved within the code. This makes it much simpler to remove the
count field for Java 9 and keep the Java 8 implementation intact.

- Temporarily disable JIT toUpper/toLower acceleration

These algorithms need to be adjusted to extract the length from the
right place. In fact I think these APIs need to be redesigned so these
implementation details are processed in the Java code. The helpers
should already receive the array and length as arguments.

Signed-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"
"More optimized class initialization check in MethodHandle

Check if a class has been initialized by calling a JITHelpers method
which can be optimized by the JIT.
Original implemenation uses Unsafe to load the class flag from J9Class
and JIT cannot see through it. With this change, JIT is able to
eliminate the check if it knows what the class is and that the class
has been initialized.
This change also caches the JITHelpers object and the Unsafe object in
MethodHandle as a static field so that when a JITHelpers call is
reduced, the load of JITHelpers object can also be reduced.

Signed-off-by: Liqun Liu <liqunl@ca.ibm.com>"
"Remove uses of INTERP_SMALL_MONITOR_SLOT (VM/OMR/DDR)

Replace with GC_COMPRESSED_POINTERS

[ci skip]

Signed-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"
"Revert ""Revert ""Revert ""Revert ""Remove uses of INTERP_COMPRESSED_OBJECT_HEADER"""""""""
"Stop reserving monitors that have been cancelled

Today, a monitor that was reserved and then cancelled may be reserved
again. It is not difficult to accidentally cause an arbitrary number of
cancellations of a single monitor - one need only access a shared
StringBuffer from multiple threads. Due to the high cost of cancellation
(which waits for the thread holding the reservation to yield), lock
reservation can significantly degrade performance when this usage
pattern occurs. Real applications have seen large regressions (17% in
one case) caused by the JIT compiler enabling reservation by default.

This commit implements a scheme to prevent reserving a monitor after it
has been cancelled, as proposed in issue #1124. A monitor whose lock
word is 0 can no longer be reserved. Instead, reservation requires that
the previous value of the lock word contain a particular bit pattern to
signify that the monitor is reservable. The reservable bit pattern has
all bits clear except for the reservation bit, which is set. There was
previously no sensible interpretation for this value in a lock word, so
once a monitor is acquired (either with reservation or without), its
reservable status will not be restored thereafter. Objects subject to
reservation have their lock words initialized to the reservable value in
order to allow them to be reserved once each.

This new scheme is a more conservative default which prevents the
pathological behaviour described above while retaining most of the
benefit of lock reservation for objects that are only ever locked by a
single thread.

In cases where it is known that reserved objects are not shared between
threads, or where it is desirable to allow monitors to be serially
reserved by different threads, users can opt in to the original
behaviour by passing -XlockReservation on the command line.

For the moment, the new scheme is used only on x86. This commit includes
a number of tweaks to x86 code generation in order to accommodate it:

- The reserving entry fast path falls back to lock cmpxchg when the lock
  word is zero, to prevent any attempt to reserve.

- The non-reserving entry fast path accepts reservable locks.

- The ""non-reserving"" entry fast path now conditionally reserves, if the
  type is known to be one for which reservation is in use.

- The reserving exit fast path falls back to a sequence for unreserved
  locks (cmp ebp, [lock word]; jne; mov [lock word], 0).

- Outlined recursive increment and decrement no longer spuriously reject
  reserved locks.

Signed-off-by: Devin Papineau <devinmp@ca.ibm.com>"
"Code review changes

Use j9javavm to store cpu cache info and initialize writeback features in
jvminit.c

Use switch instead of if/else for the different writeback feature cases.

Can't use inline asm with Windows, so exclude as supported

Signed-off-by: Mike Zhang <mike.h.zhang@ibm.com>"
"Implement Unsafe writebackMemory functions for x86

Use clwb, clflushopt, or clflush instruction depending on which is
available. Throw RuntimeException if writeback is not supported.

Also extend the cpuid x86 instruction wrapper to be able to query
subleafs for the information necessary to determine writeback
capabilities.

Signed-off-by: Mike Zhang <mike.h.zhang@ibm.com>"
"Only bootstrap or platform classloader define package java/java.*

Throw j.l.LayerInstantiationException if a classloader other than
bootstrap or platform classloader attempts to define package
java/java.*;
Modified VM.initializeClassLoader API to accept an integer loaderType to
differentiate bootstrap, platform, and other classloader;
Assuming platform classloader is the second classloader initialized
after bootstrap classloader;


Signed-off-by: Jason Feng <fengj@ca.ibm.com>"
"Bringup JDK15

Added JAVA15 pConfig;
Added J2SE_V15 & BCT_Java15MajorVersionShifted;
Added implementation of ExtendedOperatingSystemMXBeanImpl methods:
getCpuLoad(), getTotalMemorySize(), getFreeMemorySize() which are for
added since Java 14;
Added stub classes within package java/lang/invoke:
AddressVarHandleGenerator, VarHandleMemoryAddressBase, VarHandles;
Added latest_exclude_15.txt,jvmtitests_excludes_15.xml;
Modified ASM references to JDK jdk.internal.org.objectweb.asmand updated
tests accordingly.

Signed-off-by: Jason Feng <fengj@ca.ibm.com>"
"Use new OMR API to implement getSystemCpuLoad

A new OMR port library API `omrsysinfo_get_CPU_load` has been
implemented which calculates the CPU load for us. The OMR API is a
replica of how we currently calculate the CPU load (the logic from
OpenJ9 has been sunk down into OMR).

In this commit we make use of the new API as it provides support for
all operating systems we build OpenJ9 on.

Signed-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"
"Implement jmap and OpenJ9VirtualMachine.heapHisto

Add functions to create a formatted string showing heap class statistics.
Implement OpenJ9VirtualMachine.heapHisto() for compatibility with reference
implementation.  Extend attach API to run remote diagnostics (more to come when
jcmd is implemented). Implement standalone jcmd utility. Add tests cases for
the above. Miscellaneous cleanup while I have the files open.

Fixes https://github.com/eclipse/openj9/issues/5317

[ci skip]

Signed-off-by: Peter Bain <peter_bain@ca.ibm.com>"
"Append VarHandle argument to MethodTypes for VarHandle call sites

The descriptor string at the call site doesn't match the 
internal method signature for VarHandle operations (extra VH arg).
After generating the call site MethodType, append the VH arg.

This lets us remove the typeTable, which used to bridge this gap.

Signed-off-by: Bjørn Vårdal <bjornvar@ca.ibm.com>"
"1. Changed the check for lambda class names and hash keys to check only before the index number
2. Added a romSize check at first to avoid checking everything else
3. Changed the check for class file size because size might differ when index numbers have different numbers of digits
4. Changed shouldCheckForEquality to not check the class names for lambda classes
5. Added tests
6. Added a compareROMClassForEquality Trace Event for tests
7. Added the command line option -XX:[+/-]ShareAnonymousClasses
8. Disabled shared anonymous classes for a test to not store extra orphans
9. Added a test for disabling shared lambdas
10. Added the description of the command line option to the output of the help option

Closes: #5665

Signed-off-by: sogutbera <sogutbera@ibm.com>"
"Remove workaround in Access.defineClass()

* Add RAM class flag J9ClassIsExemptFromValidation which is set for
  MagicAccessorImpl and its subclasses which makes them exempt for
  some access and validation rules (like classes defined via unsafe
  API).

* Add and use macro: J9CLASS_IS_EXEMPT_FROM_VALIDATION.

* New flag, J9_FINDCLASS_FLAG_NAME_IS_INVALID, is used to signal
  an invalid class name if the actual loaded class is not exempt.
  If the class being defined is not exempt, defineClassCommon()
  will now return NULL without a pending exception.
  ClassLoader_defineClassImpl() throws an exception only
  in that case.

* Allow JavaLangAccess to define a class with a null ProtectionDomain.

* Map proxy classes to the proper module.

* defineClassCommon() now calls fixUnsafeMethods() as necessary

* fix loop start index in verifyQualifiedName()

Signed-off-by: Keith W. Campbell <keithc@ca.ibm.com>"
"Rename draft 'MemberOfNest' to final 'NestHost'

Drafted specification for 'JEP 181: Support Nestmate Access Control in
the JVM' used attribute name 'MemberOfNest.' Final specification uses
attribute name 'NestHost.' This commit brings parser & internal variable
names up to date.

Signed-off-by: Talia McCormick <Talia.McCormick@ibm.com>"
"JEP 318: Epsilon: An Arbitrarily Low-Overhead Garbage Collector

	- new java option-Xgcpolicy:nogc
	- compatible with -XX:+UseNoGC
	- initialize gc configurations for gcpolicy:nogc
	- update java heap management for gcpolicy:nogc
	- new gc to vm api for retrieving nogc mode in vm

Signed-off-by: Lin Hu <linhu@ca.ibm.com>"
"Spelling

* about
* absence
* access
* accessibility
* accommodate
* accommodating
* according
* account
* achieve
* acknowledges
* acquire
* acquiring
* across
* actually
* adaptation
* additionally
* address
* address
* advantage
* after
* aggregate
* aggressive
* align
* aligned
* allocate
* allocated
* allocation
* already
* always
* amount
* analysis
* anchored
* annotation
* anyways
* appended
* application
* appropriate
* argument
* around
* arrangement
* array
* arraylength
* artificially
* assignment
* associate
* assumption
* asymmetry
* atomically
* attach
* attempt
* attribute
* auxiliary
* available
* because
* before
* beginning
* behaviour
* being
* belong
* benefit
* between
* bootstrap
* boundary
* bracket
* branch
* branches
* brilliant
* buffer
* byte
* bytecodes

Signed-off-by: Josh Soref <jsoref@gmail.com>"
"JDK13 bringup - adding pConfig JAVA13

1. added pConfig JAVA13 along with flag Java13;
2. added a field java.lang.invoke.InvokerBytecodeGenerator.HIDDEN_SIG
for JDK13;
3. added a build flag ive_rawBuild which is not enabled;
4. removed J2SE_SHAPE related code;
5. use ""ifdef J9VM_IVE_RAW_BUILD"" in place of ""J2SE_SHAPE(vm) ==
J2SE_SHAPE_RAW"";
6. Modified PANAMA pConfig to depend on JAVA13.

Signed-off-by: Jason Feng <fengj@ca.ibm.com>"
"Store default value in J9Class

1. Flattenable types can never be NULL.
   If a flattenable type is not flattened,
   it must be pre-filled with the defaultValue.
2. For all non-array value types, allocate memory for its default value.
3. Store the default value in the flattened class cache.
4. Create ValuetypesIterator and update GC scanners to scan for default values
5. Modifying the structure of flattened Class Cache
6. Update Allocation Size for flattened Class Cache

Signed-off-by: thomasli <Xinhai.Li@ibm.com>"
"Bootstrapclassloader should not load array classes

As per specification, boostrap classloader can't load an array class,
i.e., following code snippet should throw j.l.ClassNotFoundException:
ClassLoader.getSystemClassLoader().loadClass(""[Ljava.lang.String;"");

The fix is to identify an array class within verifyQualifiedName(),
return null when calling java native
java.lang.VMAccess.findClassOrNull() for bootstrap classloader, hence a
j.l.ClassNotFoundException will throw eventually.
1. Modified verifyQualifiedName to return three states of class name,
i.e., invalid, valid non-array, valid array classes;
2. java.lang.VMAccess.findClassOrNull returns null for array classes;
3. Removed com.ibm.oti.vm.BootstrapClassLoader.findClass (Java 9 doesn't
use com.ibm.oti.vm.BootstrapClassLoader) and associated native
com.ibm.oti.vm.VM.findClassInModuleOrNull implementation;
4. This change also makes Java 8(29) matching RI Java 8 behaviours;
5. Restored Test_ClassLoader, and added a test against
ClassLoader.getSystemClassLoader().loadClass(""[Ljava.lang.String;"").

Signed-off-by: Jason Feng <fengj@ca.ibm.com>"
"Add error handling for classes with J9 cp tags

A CONSTANT_Package_info structure is permitted only in the constant pool
of a class file that declares a module, that is, a ClassFile structure
where the access_flags item has the ACC_MODULE flag set. In all other
class files, a CONSTANT_Package_info structure is illegal.

Signed-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"
"Add methods inherited from superinterfaces to iTables

Modify iTables to contain every method in both the local interface and
any extended interfaces so that the resolved interface class in the RAM
constant pool for interface methods represents the interface that the
receiver class must implement, rather than the class that declared the
resolved interface method.

Signed-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"
"Re-organize com.ibm.tools.attach.target classes

Moved com.ibm.tools.attach.target to openj9.internal;
Also moved openj9.tools.attach.diagnostics.base to
openj9.internal.tools.attach.diagnostics.base;
Updated references accordingly.

Signed-off-by: Jason Feng <fengj@ca.ibm.com>"
"Update nestmates jni calls for new spec

Nestmates JNI calls now triggered classloading for the hostClass
and for the nest members. This PR is based on Talia's work in
https://github.com/eclipse/openj9/pull/1501.

Also added new testcases.

Signed-off-by: tajila <atobia@ca.ibm.com>"
"Fix various bugs in VarHandle

The changes are aimed to address
various code issues detected in VarHandle.

Signed-off-by: CHENGJin <jincheng@ca.ibm.com>"
"Remove duplicate macros between j9nonbuilder.h and j9consts.h

Remove macros in j9consts.h and j9nonbuilder.h, and replace those macros
accordingly, each with their respective j9nonbuilder  duplicate in j9javaaccessflags.h.

Steps:

- Remove duplicate macros from j9consts.h and j9nonbuilder.h
-Replace those macros accordingly, each with their respective j9nonbuilder  duplicate in j9javaaccessflags.h wherever they appeared in the repository (This includes the macros in
the DDR code).
-Modify runtime/ddr/vmddrstructs.properties to allow support for Java8 and older
- Change the copyrights of the modified files

Fixes: #4198
Fixes: eclipseGH-4287
Signed-off-by: Aidan Ha <qbha@edu.uwaterloo.ca>"
"Avoid constant timestamp checking on classpaths

The changes are to force a timestamp check only once in
the open state when the option ""noCheckClasspathTimestamps""
is specified by default. The VM behaves in the same way as
the existing OpenJ9 when the option ""checkClasspathTimestamps""
is specified.

Related: #6022

Signed-off-by: Cheng Jin <jincheng@ca.ibm.com>"
"Jstat initial implementation

Added openj9.tools.attach.diagnostics.tools.Jstat to process command
line arguments, and send jstat commands ""jstat.class"";
Provided the number of class loaded/unloaded for jstat.class;
Changed Java_openj9_internal_management_ClassLoaderInfoBaseImpl_getLoadedClassCountImpl
return type from jint ot jlong;
Added sanity tests.

Signed-off-by: Jason Feng <fengj@ca.ibm.com>"
"Re-order wide bytecode for Valuetype bytecodes

This change shifts internal bytecodes 203-216 up by two, and
moves the Value Types bytecodes to where they belong.

These commit is based on Ali's changes in
https://github.com/tajila/openj9/pull/6/commits.

Signed-off-by: tajila <atobia@ca.ibm.com>"
"Add tests for -XX:[+|-]ClassRelationshipVerifier

Test the following cases:
- only source class loaded
- only target class loaded
- neither target nor source classes loaded
- source is subclass of target
- source implements target
- source is not subclass of target
- source does not implement target

For tests where classes are not already loaded, query the
classRelationships hash table in the class loader to check that a
source/child and target/parent relationship has been recorded.

Signed-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"
"VM change: Store GC hints into the shared cache

1. Add new type J9SHR_DATA_TYPE_STARTUP_HINTS
2. Add 2 new APIs j9shr_storeGCHints() and j9shr_findGCHints() for GC.
These 2 APIs will store/find GC hints to/from local copy
vm->sharedClassConfig->localStartupHints.
3. Add new API fetchStartupHintsFromSharedCache() and
storeStartupHintsToSharedCache() that fetch/store localStartupHints
from/to the shared cache.
4. Add new StartupHintsTest
5. Add option -Xshareclass:printStats=startuphint
6. Add fields numStartupHints and startupHintBytes to
J9SharedClassJavacoreDataDescriptor
7. Add numStartupHints and startupHintBytes to cache statistics

issue: #3743

Signed-off-by: hangshao <hangshao@ca.ibm.com>"
"Rework jstack to use java.base only

In the target VM use only classes available in the java.base module.

Rework original implementation of jstack: ""Implement jstack in 0.14"" #5336

- Create the result string at the target instead of the attacher
- Delete unnecessary classes and packages
- Delete unit tests for deleted classes and other dead test code
- Minor stylistic cleanup while I have the files open

[ci skip]

Signed-off-by: Peter Bain <peter_bain@ca.ibm.com>"
"Use global name space for shared semaphores on Windows

Support session and global semaphore namespaces.

Fixes https://github.com/eclipse/openj9/issues/5533

[ci skip]

Signed-off-by: Peter Bain <peter_bain@ca.ibm.com>"
"Move dump natives to java.base

Move the dump generation natives to java.base so they are accessible from the
attach API target classes.

Clean up Dump.java and associated files: put the copyright at the top, put
native declarations together, fix some spacing and NLS problems.

This is part of https://github.com/eclipse/openj9/issues/5164

[ci skip]

Signed-off-by: Peter Bain <peter_bain@ca.ibm.com>"
"Enable bootstrap class sharing by default on OpenJ9 Java 11

1.Enable bootstrap class sharing by default on OpenJ9 Java 11+.
2.Shared.isSharingEnabled() returns false if -Xshareclass is
not used in CML, so that non-bootstrap class sharing is disabled by
default.
3. When bootstrap class sharing is enabled by default, set flags
J9SHR_RUNTIMEFLAG_ENABLE_NONFATAL and clear
J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES and verboseFlags.
4. Add a test that ensures only bootstrap class sharing is enabled by
default.
5.Change verbosetests to check for a non-bootstrap class, as
-verbose:dynload won't show bootstrap classes loaded from the share
cache.

Doc issue eclipse/openj9-docs#110
Fixes #1646

Signed-off-by: hangshao <hangshao@ca.ibm.com>"
"Initial support for Java 18.3 raw builds (b23)

1. Added a Java 18.3 pConfig JAVA18.3 (along with JPP flag
Java18.3) which depends on SIDECAR19-SE-B175, i.e., it will be a
super-set of current Java 9 configuration;
2. Use flag Sidecar18.3-SE to decorate Java code only for Java 18.3 so
no changes made to Java 8 & 9;
3. Introduced a vm shape b1803 (will be set in classlib.properties
during SDK composing) to denote the native code only applying to Java
18.3 via runtime checking;
4. For simplicity purpose, no new J2SE version introduced such as
J2SE_18.3 yet. There are two reasons for this, one is that currently vm
shape b1803 is sufficient to identify the code only for Java 18.3, the
other reason also main one is that OpenJ9 build takes latest J2SE
(J2SE_19) because classlib.properties file doesn't present during OpenJ9
build process. A newer J2SE value but not for OpenJ9 Java 9 appears
confusing. This can be fixed when Java 18.3 Extensions for OpenJDK is
available;
5. Implemented Java 18.3 only native
jdk.internal.misc.Unsafe.objectFieldOffset1(Class<?>, String), also
refactored J9ReflectFunctionTable.idFromFieldObject() and added helper
method getFieldObjHelper() to avoid code duplication;
6. Divided jdk.internal.misc.Unsafe natives registration into two
groups, Java 9 (implicitly for Java 18.3 as well) and Java 18.3 only.
Note this class only presents in Java 9 and beyond;
7. No refactoring for Java 9 b136 etc. within this pull request. (leave
the cleanup in a separated pull request/issue).

-version output from a Java 18.3 raw build:
openjdk version ""10-internal""
OpenJDK Runtime Environment (build 10-internal+0-adhoc.arnold.jdk10)
IBM J9 VM (build 2.9, JRE 9 Linux amd64-64 Compressed References
20170927_365435 (JIT enabled, AOT enabled)
J9VM     - b7e4d74
OMR      - 9c6e4b8)

Issue: #152

Signed-off-by: Jason Feng <fengj@ca.ibm.com>"
"Add new ThreadMXBean APIs

Add Add ThreadMXBean.dumpAllThreads(..., int maxDepth) and getThreadInfo(...,
int maxDepth) APIs for Java 10.

Add tests for the new APIs, including stack frames with method handles and
lambdas.

Fix incorrect copyright.

Signed-off-by: Peter Bain <peter_bain@ca.ibm.com>"
"Implement resolve code for ConstantDynamic entries

- added ConstantDynamic case to ldc, ldc_w, ldc2_w bytecode
- added native resolve helper for ConstantDynamic
- new MethodHandle resolve method for Java side
- implement mutex montior on ramslot to ensure single resolve is allowed

Signed-off-by: Jack Lu <Jack.S.Lu@ibm.com>"
"Throw NoClassDefFoundError: MH.resolveInvokeDynamic(...)

If ConstantPool.getClassAt(...) returns null while resolving bootstrap
method handles, then we should throw NoClassDefFoundError, and the
cause of NoClassDefFoundError should be ClassNotFoundException. The
message of NoClassDefFoundError and ClassNotFoundException should
contain the name of the class, which wasn't found.

Signed-off-by: Babneet Singh <sbabneet@ca.ibm.com>"
"Revert ""Revert ""Revert ""Remove uses of INTERP_COMPRESSED_OBJECT_HEADER"""""""
"Revert ""Revert ""Remove uses of INTERP_COMPRESSED_OBJECT_HEADER"""""
"Revert ""Remove uses of INTERP_COMPRESSED_OBJECT_HEADER"""
"Remove uses of INTERP_COMPRESSED_OBJECT_HEADER

Replace with GC_COMPRESSED_POINTERS (J9VM/OMR/DDR versions). In every
build, either both or neither the flags are set. Removal of the flag
definitions will follow later.

[ci skip]

Signed-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"
"Use a class annotation to prevent instrumentation

New annotation: com.ibm.oti.vm.J9UnmodifiableClass

Rather than using a hard-coded (and inconsistent!) list of classes which
are not allowed to be modified by the JVMTI ClassFileLoadHook or
Re[define/transform]Classes APIs, annotate the classes which are private
to the VM implementation.

For performance, only classes loaded by the bootstrap loader will be
scanned for the annotation before ClassFileLoadHook (and that scan is
optimistic - any class file containing the bytes representing a constant
pool entry UTF8 matching the annotation signature will be tagged). This
is safe because the VM is largely in control of the boot path (it's
beyond unlikely that this pattern could match accidentally in classes
added to the boot path by the application).

Any class with access to com.ibm.oti.vm may use the annotation to
prevent being redefined. This prevents application classes from using
the annotation.

This also fixes the fact that we were not reporting ClassFileLoadHook
for any class that was not explicitly-named in the defineClass call.

Fixes: #2768

[ci skip]

Signed-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"
"Add option to limit identity hash code to positive values

Add command line option ""-XX:[+|-]PositiveIdentityHash"" to
enable/disable forcing identity hash code to be a positive value.

Fixes: #3062

Signed-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"
"Fix shared cache modlevel for Java 10 and 11.

1. Remove J2SE_15, J2SE_16, J2SE_17
2. Change J2SE_18 to 0x0800, J2SE_19 to 0x0900, J2SE_V10 to 0x0A00
J2SE_V11 to 0x0B00
3. Starting from Java 10, shared cache modlevel will be set to java
version number
4. Re-enable tests in testSCCMLTests2

Fixes #1288

Signed-off-by: hangshao <hangshao@ca.ibm.com>"
"Add JVM state attribute into RuntimeMXBean

Updates the existing RuntimeMXBean to export JVM runtime state.
New attributes getVMIdleState, VMIdle is added to RuntimeMXBean.
Corresponding changes made into openj9/test/.../TestRuntimeMXBean.java
and added a new test into it.

Signed-off-by: Parameswaran Selvam <parselva@in.ibm.com>"
"Renaming Java 18.3 to Java 10

Update JPP tags accordingly.

Signed-off-by: Jason Feng <fengj@ca.ibm.com>"
"Revert ""Remove duplicate macros between j9nonbuilder.h and j9consts.h"""
"Bring up rawbuild Java 10 b35

1. Remove method java.lang.Access.newStringUnsafe() which is removed
from jdk.internal.misc.JavaLangAccess since b35;
2. Add support for Java 10 class version 54

Signed-off-by: Jason Feng <fengj@ca.ibm.com>"
"Adjust DDR namespace annotations

* declarations in stackwalk.h grouped to reduce number
  of annotations required
* also in generated constant pool
* added VMCPTool option '-verbose' (default off)

Issue: #378
Signed-off-by: Keith W. Campbell <keithc@ca.ibm.com>"
"Set proper java.specification.version

Removed the setting of java.specification.version by Java code;
Set java.specification.version to same value as
java.vm.specification.version in C code.
Added java.specification.version to the list of system properties that
must be defined by the VM.
Also updated the comments about other system properties.

Signed-off-by: Jason Feng <fengj@ca.ibm.com>"
"Remove duplicate macros between j9nonbuilder.h and j9consts.h

Replace and remove macros in j9consts.h and replaced those macros
accordingly, each with their respective duplicate in j9nonbuilder.h.

Steps:

- Remove duplicate macros from j9consts.h
- Replace the removed macros with their respective duplicate for
wherever they appeared in the repository (This includes the macros in
the DDR code).
- Move the Macros from j9nonbuilder.h into j9consts.h. This is because
j9consts.h has a lot less structs that are dependant on other header
files.
- Add `#include j9consts.h` where necessary
- Change the copyrights of the modified files

Fixes: #4198

Signed-off-by: Aidan Ha <qbha@edu.uwaterloo.ca>"
"WIP: Atomic-free JNI work

- refactor code to make it more readable, less invasive
- add build flags to control vm access options
- fix AMD64 JIT to be consistent with VM

Signed-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"
"Remove genericInvokeVarHandle (no longer used)

VarHandle call site MethodTypes now have the extra VH argument,
which eliminates the need for this method.

Signed-off-by: Bjørn Vårdal <bjornvar@ca.ibm.com>"
"Revert ""Enable bootstrap class sharing by default on OpenJ9"""
"Enable bootstrap class sharing by default on OpenJ9 Java 11

1. Enable bootstrap class sharing by default on OpenJ9 Java 11+.
2. Shared.isSharingEnabled() returns false if -Xshareclass is
not used in CML, so that non-bootstrap class sharing is disabled by
default.
3. When bootstrap class sharing is enabled by default, set flags
J9SHR_RUNTIMEFLAG_ENABLE_NONFATAL and clear
J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES and verboseFlags.
4. Add a test that ensures only bootstrap class sharing is enabled by
default.
5. Change verbosetests to check for a non-bootstrap class, as
-verbose:dynload won't show bootstrap classes loaded from the share
cache.

Fixes #1646

Signed-off-by: hangshao <hangshao@ca.ibm.com>"
"Refactor primitive type auto unboxing

- define constant dynamic return type constant flags
- use matching primitve class unboxing macro depending on the return type flag
- update code comments to describe code behavior
- refactor error messages to include more details for debug

Signed-off-by: Jack Lu <Jack.S.Lu@ibm.com>"
Replace list of 'other changes' with link
"Refactor invokeinterface to handle special cases

- allow private interface methods
- consistently handle Object methods
- use tag bits in resolved CP entries to differentiate cases
- update JIT resolve helpers to handle new cases

Signed-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"
"Version fix for j9 cp tags

- restricted code to run in Java 9 vms only
- moved all tests to Java9AndUp

Signed-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"
"Write CONSTANT_DYNAMIC entry to ROMClass

- mark ConstantDynamic entry in constantpool
- add visit function to ROMClass Writer
- add new CP type for ConstantDynamic
- fixed DDR mapping of new CP type

Signed-off-by: Jack Lu <Jack.S.Lu@ibm.com>"
"Remove remaining Valhalla MVT code

Sections relating to MVT Method Handles are removed.

The _isClassValueCapable field of ClassFileOracle is removed since value
classes in L-World are denoted using the ACC_VALUE_TYPE instead of the
@ValueCapableClass annotation.

Signed-off-by: Eric Zhang <eric99.zhang@gmail.com>"
"Fixed code formatting

Signed-off-by: Jack Lu <Jack.S.Lu@ibm.com>"
"Implement Reference.waitForReferenceProcessing()

implement Reference.waitForReferenceProcessing() in order to
be compatible with Hotspot and increasing the performance of
Bits.reserveMemory(long,int). 
 - java native method waitForReferenceProcessingImpl()
 - new vm memoryFunction j9gc_wait_for_reference_processing() 
   return true if the references are currently in process. 
 - new processReferenceMonitor to avoid the race condition between
   processingReference and waitForReferenceProcessing()
 - the implementation is only for Java 9 and later

Issue: #373 

Signed-off-by: Lin Hu <linhu@ca.ibm.com>"
